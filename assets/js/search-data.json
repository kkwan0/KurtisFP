{
  
    
        "post0": {
            "title": "If Statements",
            "content": "if statements are conditional statements that execute based off of a condition. The syntax of an if statement in JAVA is . if ( number &gt; 0 ) { //code code code } . An if else statement is going to execute another block of code if the first condition is not met. . if ( number &gt; 0 ) { //code code code } else { //keyword else //more code code code } . Else if will add another condition that it can execute . if ( number &gt; 0 ) { //code code code } else if (number &lt; 0) { //more code code } else { System.out.println(&quot;code&quot;); } . De Morgan&#39;s Law . There are 2, which is basically (AuB)&#39; = A&#39; n B&#39; or the compliment of the union is equal to the intersection of the compliment (neither a or b is equal to not a and not b) . https://cdn.discordapp.com/attachments/967938602485035090/1018304363065778317/unknown.png . and . (AnB)&#39; = A&#39; u B&#39; or the compliment of the intersection is equal to the union of the compliments (not a and b equals not a or not b) . https://cdn.discordapp.com/attachments/967938602485035090/1018305030761234540/unknown.png . image.png . image.png . This is the if statements example, it basically just has an imput, and depending on what the input is, it will do one of 5 situations. . Java If explanation . This block uses a while loop and basically depending on the choice chosen, it would go to that if condition, and if it isn&#39;t one of the ifs, it will exit the while loop. . import org.apache.commons.lang3.StringUtils; import java.util.Scanner; public class test{ public static void main(String[] args) { Integer number = 2; while (number &gt; 0) { System.out.println(&quot;choose a number from 1 to 5, type anything else for exit.&quot;); Scanner input = new Scanner(System.in); number = input.nextInt(); System.out.println(number); if (number == 1) { System.out.println(&quot;(V) ∧ ∧ (V) &quot;); System.out.println(&quot; ヽ(･ω･) ﾉ&quot;); System.out.println(&quot; / /&quot;); System.out.println(&quot; ノ￣ゝ&quot;); } else if (number == 2 ) { System.out.println(&quot; ∧＿∧&quot;); System.out.println(&quot; (,,´∀｀）　&quot;); System.out.println(&quot; ⊂　 つ&quot;); System.out.println(&quot; | |/&quot;); System.out.println(&quot; (__)&quot;); } else if (number == 3) { // basically what this one is is that the print does not like escape characters(basically / so if you wanna print out /n), which it kept giving me the error of illegal escape character String str1 = &quot; ／ﾌﾌ ム｀ヽ &quot;; String str2 = &quot; / /) ∧∧　 ) ヽ) &quot;; String str3 = &quot; / | (´・ω・`）ノ⌒（ゝ ) &quot;; String str4 = &quot; / ﾉ⌒7⌒ヽーく ヽ ., / &quot;; String str5 = &quot; ヽ _ / ｡　 ノ､ ｡|/ &quot;; String str6 = &quot; `ヽ` ー-&#39;_人`ーﾉ &quot;; String str7 = &quot; ヽ ￣ _人&#39;彡ﾉ &quot;; String str8 = &quot; ﾉ r&#39;十ヽ / &quot;; // this method of storing it in varibles gets around that System.out.println(str1); System.out.println(str2); System.out.println(str3); System.out.println(str4); System.out.println(str5); System.out.println(str6); System.out.println(str7); System.out.println(str8); } else if (number == 4) { for (int i = 0; i &lt; 5; i++) //this makes a loop that loops 5 times { String space = &quot; &quot;; //prints the spaces String repeated = StringUtils.repeat(space, i); //this repeats the character i times System.out.println(repeated); System.out.println(repeated + &quot;(V) ∧ ∧(V) &quot;); System.out.println(repeated + &quot; ヽ(･ω･) ﾉ&quot;); System.out.println(repeated + &quot; / /&quot;); System.out.println(repeated + &quot; ノ￣ゝ&quot;); } //idk how to clear console but i would add it right here^ } else if (number == 5 ) { for (int i = 0; i &lt; 5; i++) { System.out.println(&quot; ∧＿∧&quot;); System.out.println(&quot; (,,´∀｀）　&quot;); System.out.println(&quot; ⊂　 つ&quot;); System.out.println(&quot; | |/&quot;); System.out.println(&quot; (__)&quot;); } } else { number=0; System.out.println(number); } } System.out.println(&quot;it ended&quot;); } } test.main(null); . choose a number from 1 to 5, type anything else for exit. 1 (V) ∧ ∧ (V) ヽ(･ω･) ﾉ / / ノ￣ゝ choose a number from 1 to 5, type anything else for exit. 2 ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) choose a number from 1 to 5, type anything else for exit. 3 ／ﾌﾌ ム｀ヽ / /) ∧∧　 ) ヽ) / | (´・ω・`）ノ⌒（ゝ ) / ﾉ⌒7⌒ヽーく ヽ ., / ヽ _ / ｡　 ノ､ ｡|/ `ヽ` ー-&#39;_人`ーﾉ ヽ ￣ _人&#39;彡ﾉ ﾉ r&#39;十ヽ / choose a number from 1 to 5, type anything else for exit. 4 (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ choose a number from 1 to 5, type anything else for exit. 5 ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) choose a number from 1 to 5, type anything else for exit. 6 0 it ended . Switch Case . This one uses switch and case, and also a while loop The while loop keeps going as long as bool is true, and the ending condition is going to make bool false. Switch reads the variable choice, which is then always made from the input from the while loop. The case is going to be what the choice is. . import org.apache.commons.lang3.StringUtils; import java.util.Scanner; public class test{ public static void main(String[] args) { System.out.println(&quot;choose a number from 1 to 5, type anything else for exit.&quot;); Scanner input = new Scanner(System.in); boolean bool = true; int choice; while(bool) { System.out.println(&quot;1. lobster cat&quot;); System.out.println(&quot;2. idk what this is&quot;); System.out.println(&quot;3. jacked cat&quot;); System.out.println(&quot;4. cat animation&quot;); System.out.println(&quot;5. 5 cats&quot;); choice = input.nextInt(); switch(choice) { case 1: System.out.println(&quot;1. lobster cat&quot;); System.out.println(&quot;(V) ∧ ∧ (V) &quot;); System.out.println(&quot; ヽ(･ω･) ﾉ&quot;); System.out.println(&quot; / /&quot;); System.out.println(&quot; ノ￣ゝ&quot;); break; case 2: System.out.println(&quot;2. idk what this is&quot;); System.out.println(&quot; ∧＿∧&quot;); System.out.println(&quot; (,,´∀｀）　&quot;); System.out.println(&quot; ⊂　 つ&quot;); System.out.println(&quot; | |/&quot;); System.out.println(&quot; (__)&quot;); break; case 3: System.out.println(&quot;3. jacked cat&quot;); String str1 = &quot; ／ﾌﾌ ム｀ヽ &quot;; String str2 = &quot; / /) ∧∧　 ) ヽ) &quot;; String str3 = &quot; / | (´・ω・`）ノ⌒（ゝ ) &quot;; String str4 = &quot; / ﾉ⌒7⌒ヽーく ヽ ., / &quot;; String str5 = &quot; ヽ _ / ｡　 ノ､ ｡|/ &quot;; String str6 = &quot; `ヽ` ー-&#39;_人`ーﾉ &quot;; String str7 = &quot; ヽ ￣ _人&#39;彡ﾉ &quot;; String str8 = &quot; ﾉ r&#39;十ヽ / &quot;; System.out.println(str1); System.out.println(str2); System.out.println(str3); System.out.println(str4); System.out.println(str5); System.out.println(str6); System.out.println(str7); System.out.println(str8); break; case 4: System.out.println(&quot;4. cat animation&quot;); for (int i = 0; i &lt; 5; i++) //this makes a loop that loops 5 times { String space = &quot; &quot;; //prints the spaces String repeated = StringUtils.repeat(space, i); //this repeats the character i times System.out.println(repeated); System.out.println(repeated + &quot;(V) ∧ ∧(V) &quot;); System.out.println(repeated + &quot; ヽ(･ω･) ﾉ&quot;); System.out.println(repeated + &quot; / /&quot;); System.out.println(repeated + &quot; ノ￣ゝ&quot;); } //idk how to clear console but i would add it right here^ break; case 5: System.out.println(&quot;5. 5 cats&quot;); for (int i = 0; i &lt; 5; i++) { System.out.println(&quot; ∧＿∧&quot;); System.out.println(&quot; (,,´∀｀）　&quot;); System.out.println(&quot; ⊂　 つ&quot;); System.out.println(&quot; | |/&quot;); System.out.println(&quot; (__)&quot;); } break; case 6: System.out.println(&quot;exit&quot;); System.exit(0); bool = !bool; break; default: System.out.println(&quot;not valid&quot;); break; } } } } test.main(null); . choose a number from 1 to 5, type anything else for exit. 1. lobster cat 2. idk what this is 3. jacked cat 4. cat animation 5. 5 cats 1. lobster cat (V) ∧ ∧ (V) ヽ(･ω･) ﾉ / / ノ￣ゝ 1. lobster cat 2. idk what this is 3. jacked cat 4. cat animation 5. 5 cats 2. idk what this is ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) 1. lobster cat 2. idk what this is 3. jacked cat 4. cat animation 5. 5 cats 3. jacked cat ／ﾌﾌ ム｀ヽ / /) ∧∧　 ) ヽ) / | (´・ω・`）ノ⌒（ゝ ) / ﾉ⌒7⌒ヽーく ヽ ., / ヽ _ / ｡　 ノ､ ｡|/ `ヽ` ー-&#39;_人`ーﾉ ヽ ￣ _人&#39;彡ﾉ ﾉ r&#39;十ヽ / 1. lobster cat 2. idk what this is 3. jacked cat 4. cat animation 5. 5 cats 4. cat animation (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ 1. lobster cat 2. idk what this is 3. jacked cat 4. cat animation 5. 5 cats 5. 5 cats ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) 1. lobster cat 2. idk what this is 3. jacked cat 4. cat animation 5. 5 cats exit . Canceled future for execute_request message before replies were done . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . //De Morgans Law . public class demorgan { public static void main(String[] args) { System.out.println(&quot;yes&quot;); boolean a = true; boolean b = false; if (!((a &amp;&amp; b) &amp;&amp; (!a || !b))) //this makes sure that it prints it if it is true, and it is true if they are equal { System.out.println(&quot;second law&quot;); } if (!((b || a) &amp;&amp; (!b &amp;&amp; !a))) //this ^ { System.out.println(&quot;first law&quot;); } } } demorgan.main(null); . yes second law first law true .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/09/09/if.html",
            "relUrl": "/jupyter/2022/09/09/if.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Focus and Habits",
            "content": "Note of Gratitude . I am grateful for being able to learn CS. I am grateful for having a computer, a great teacher, an enjoyable group, and the time to learn CS outside of school. . Goals . I think that one of my goals for this year is that I would like to be able to create something from scratch, without having to search up syntax or whatnot. . Goals with Happy People . I think that my group is very fun to be in. We always have a goal of having all members understand everything we learned in the week. .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/09/09/focusandhabits.html",
            "relUrl": "/jupyter/2022/09/09/focusandhabits.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Objects in Java",
            "content": "Mort&#39;s console menu. I just looked over it and added some comments on what I understood. . import java.util.Scanner; // scanner thing for inputs import java.lang.Math; // random numbers public class Menu { public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors, keyword array {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; 033[0;93m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Hello World&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;exit&quot;); quit = true; break; case 1: System.out.print(&quot;helloworld&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); //prints the name with the colors break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic * try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;-&quot;); } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 0 - Quit - 2: DefaultRedGreenYellowBluePurpleCyanWhite 2: DefaultRedGreenYellowBluePurpleCyanWhite 3: Loading...#################### 0: exit . Unit 2: . Using main, syntax of the header. Meaning of the words: JVM - java virtual management, loads and executes the code code code Public - method needs to be public for JVM to identify it Static - only one type of method, not shared. Void - nothing returned from main method Main - identified by JVM to execute any program . public class ClassName { public static void main(String [] args) { } } . Unit 3: . This one talks a bit more about setting up the scenario of a neighborhood painter. It also talks about using objects. . ClassName objectName = new ClassName(); . Unit 4: . Describes a method, which is a “class’s behaviors” . Procedural abstraction - allows programmer to use method by knowing what method does Void method - method that performs action, but doesn’t return value Argument - value passed to method or constructor when method is called Dot operator - used to call method in class Method - named set of instructions to perform a task Parameter - variable in method signature that defines type of value to receive when method is called . Unit 5: . Use if statements. . Boolean - primitive that is either true or false If statement - conditional statement that executes when condition is true Condition - determines when to execute code code code Conditional statement - statement that executes when condition is met Logic error - error that occurs when code(x3) runs, but doesn’t do what is expected Return - exit method and go back to a point in program that called it . Unit 6: . Learn about inheritance. . Super keyword - keyword used to refer to superclass constructor signature - first line of constructor which includes public keyword, constructor name, and values to specify when object is created Inheritance - an OOP principle where subclass inherits attributes and behaviors of superclass Subclass - class that extends a superclass and inherits its attributes and behaviors Superclass - class that can create subclasses . Unit 7: . How to create a new method. . Method signature - name and parameter list . Unit 8: . Code review, feedback, and documentation . Code review - process of examining code and giving feedback to improve code code code Comment - text note Documentation - written description of purpose of code code code Programming style - set of guidelines for formatting code code code . Unit 9: . Repeat code. While loops. . While loop - keeps executing code as long as condition is true Algorithm - instructions to solve a task Control structure - conditional statement that affects program Efficient - get the most with least amount of waste Infinite loop - loop where boolean is always true Iteration statement(loop) - control structure that repeatedly executes code Pseudocode - description of steps in algorithm that is not code code code . Unit 10: . If statement, now we learn about the NOT. . NOT operator - returns true when operend is false, and vice versa If else statement - executes one thing for if, executes something else for else. Logical operator - operator that returns boolean . Unit 11: . How to use console debugging . Concatenation - join 2 strings together . Unit 12: . Decomposition and top down design, deconstruct problems into smaller tasks. . Method decomposition - breaking down a problem into smaller parts to write methods for each part. . Edge case - bug that occurs at highest or lowest end of range, or in extremes Redundant code - unnecessary code code code . Unit 13: . Create additional subclasses with special behaviors . Inheritance hierarchy - class serves as superclass for more than one subclass . Unit 14: . How can I apply my OOP to expand my code code code. . Unit 15: . I examine code. I also want code feedback. . Open source code - code that is for free use .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/09/04/code-oop.html",
            "relUrl": "/jupyter/2022/09/04/code-oop.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "College Board",
            "content": "The College Board stuff . Unit 1: Primitives .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/08/27/CB.html",
            "relUrl": "/jupyter/2022/08/27/CB.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Primatives in Java",
            "content": "import java.util.Scanner; public class BooleanExample2 { public static void main(String[] args) { boolean b1=true; boolean b2=false; System.out.println(&quot;b1 = &quot; + b1); System.out.println(&quot;b2 = &quot; + b2); Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;do you think that b1 equals b2?&quot;); String input = myObj.nextLine(); // Read user input System.out.println(&quot;answer &quot; + input); // Output user input String compile = input.toLowerCase(); // System.out.println(compile); boolean result = compile.matches(&quot;(.*)y(.*)&quot;); // System.out.println(result); //System.out.println(result); if (result == b2) System.out.println(&quot;you right&quot;); else System.out.println(&quot;you wrong&quot;); } } BooleanExample2.main(null); . b1 = true b2 = false do you think that b1 equals b2? answer no you right . //stupid regex thing that i need to test public class Test { public static void main(String[] args) { String yes = &quot;eYes&quot;; String compile = yes.toLowerCase(); System.out.println(yes); System.out.println(compile.matches(&quot;(.*)y(.*)&quot;)); System.out.println(yes.matches(&quot;/^y&quot;)); } } Test.main(null); . eYes true false .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/08/26/javaprimitives.html",
            "relUrl": "/jupyter/2022/08/26/javaprimitives.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Bash ting",
            "content": "realpath . bash ~/vscode/bash.sh python --version conda --version which code # vscode . /home/k/vscode/KurtisFP/_notebooks _______________________________________ &lt; Are you sure the back door is locked? &gt; ^__^ (oo) _______ (__) ) / ||-w | || || #!/bin/bash fortune | cowsay cat ~/vscode/bash.sh #start of script jupyter kernelspec list Available kernels: bash /home/k/.local/share/jupyter/kernels/bash java /home/k/.local/share/jupyter/kernels/java javascript /home/k/.local/share/jupyter/kernels/javascript python3 /home/k/anaconda3/share/jupyter/kernels/python3 Python 3.9.1204l conda 4.14.0004l /home/k/.vscode-server/bin/e4503b30fc78200f846c62cf8091b76ff5547662/bin/remote-cli/code . .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/08/25/bashnotebookr.html",
            "relUrl": "/jupyter/2022/08/25/bashnotebookr.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Title",
            "content": "Hello World Python Jupyter . Testing the python kernel . title:Hello World Python Jupyter Kernel- toc: true | comments: true | categories: | . print(&quot;hello world&quot;) . hello world .",
            "url": "https://paulman420.github.io/KurtisFP/2022/08/21/kurtis-python.html",
            "relUrl": "/2022/08/21/kurtis-python.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Title",
            "content": "Hello Java Jupyter . Testing the java kernel . title:Hello World Java Jupyter Kernel- toc: true | comments: true | categories: | . System.out.println(&quot;Hello WOrld&quot;) . Hello WOrld .",
            "url": "https://paulman420.github.io/KurtisFP/2022/08/21/kurtis-java.html",
            "relUrl": "/2022/08/21/kurtis-java.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Title",
            "content": "first post . first post . title:First Post- toc: true | comments: true | categories: | . Kurtis first entry . hi .",
            "url": "https://paulman420.github.io/KurtisFP/2022/08/21/firstpost.html",
            "relUrl": "/2022/08/21/firstpost.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://paulman420.github.io/KurtisFP/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://paulman420.github.io/KurtisFP/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "College Board",
          "content": "College Board Units . Unit 1: Primitive Types . notebook .",
          "url": "https://paulman420.github.io/KurtisFP/cb/",
          "relUrl": "/cb/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://paulman420.github.io/KurtisFP/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}