{
  
    
        "post0": {
            "title": "39 MC",
            "content": "39 question MC: . score: 34/39 . 15: I chose E because I thought that it would print all the steps on the way, but it wouldn&#39;t. So A is the right answer. . 16: . I chose C because I thought that it would iterate the rows of the array, but it would iterate the columns of the array. . 17: . I chose C because I saw the +2 and I thought that it would add all the even numbers, but it was actually going to add all the odd numbers. . 28: . I chose C because I thought that it would evaluate all the iterations not the outside ones, so it would be minus one. . 37: . I chose B because I checked through III and I didn&#39;t find it to fit the model, but it turns out that it would fit. So the right answer is E. .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2023/03/13/36mc.html",
            "relUrl": "/jupyter/2023/03/13/36mc.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "TT",
            "content": "public class IntByValue { public static void changeInt(int n) { System.out.println(&quot;In changeInt method&quot;); System.out.println(&quot; tBefore n += 10: n = &quot; + n); // prints 5 n = n += 10; System.out.println(&quot; tAfter n += 10: n = &quot; + n); // prints 10 } public static void main(String[] args) { int n = 5; System.out.println(&quot;Main method before changeInt(n): n = &quot; + n); // prints 5 changeInt(n); System.out.println(&quot;Main method after changeInt(n): n = &quot; + n); // still prints 5 } } IntByValue.main(null); . Main method before changeInt(n): n = 5 In changeInt method Before n += 10: n = 5 After n += 10: n = 15 Main method after changeInt(n): n = 5 . public class IntegerByValueOrReference { public static void changeInteger(Integer n) { System.out.println(&quot;In changeInteger method&quot;); System.out.println(&quot; tBefore change: n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); n += 10; // behind the scenes, this is: n = new Integer(n+10) System.out.println(&quot; tAfter change: n = &quot; + n + // prints 15 &quot; hash code = &quot; + n.hashCode()); } public static void main(String[] args) { Integer n = 5; System.out.println(&quot;Main method before changeInteger(n): n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); changeInteger(n); System.out.println(&quot;Main method after changeInteger(n): n = &quot; + n + // now prints 15 &quot; hash code = &quot; + n.hashCode()); } } IntegerByValueOrReference.main(null); . Main method before changeInteger(n): n = 5 hash code = 5 In changeInteger method Before change: n = 5 hash code = 5 After change: n = 15 hash code = 15 Main method after changeInteger(n): n = 5 hash code = 5 . import java.util.concurrent.atomic.AtomicInteger; public class PassByReference { public static void changeAtomicInteger(AtomicInteger n) { System.out.println(&quot;In changeAtomicInteger method&quot;); System.out.println(&quot; tBefore change: n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); n.set(n.get() + 10); // at this point, we are clearly working with reference data type System.out.println(&quot; tAfter change: n = &quot; + n + // prints 15 &quot; hash code = &quot; + n.hashCode()); } public static void main(String[] args) { AtomicInteger n = new AtomicInteger(5); // unlike conventional wrapper class, this requires new System.out.println(&quot;Main method before changeAtomicInteger(n): n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); changeAtomicInteger(n); System.out.println(&quot;Main method after changeAtomicInteger(n): n = &quot; + n + // now prints 15 &quot; hash code = &quot; + n.hashCode()); } } PassByReference.main(null); . Main method before changeAtomicInteger(n): n = 5 hash code = 183234327 In changeAtomicInteger method Before change: n = 5 hash code = 183234327 After change: n = 15 hash code = 183234327 Main method after changeAtomicInteger(n): n = 15 hash code = 183234327 . public class IntByReference { private int value; public IntByReference(Integer value) { this.value = value; } public String toString() { return (String.format(&quot;%d&quot;, this.value)); } public void swapToLowHighOrder(IntByReference i) { if (this.value &gt; i.value) { int tmp = this.value; this.value = i.value; i.value = tmp; } } public static void swapper(int n0, int n1) { IntByReference a = new IntByReference(n0); IntByReference b = new IntByReference(n1); System.out.println(&quot;Before: &quot; + a + &quot; &quot; + b); a.swapToLowHighOrder(b); // conditionally build swap method to change values of a, b System.out.println(&quot;After: &quot; + a + &quot; &quot; + b); System.out.println(); } public static void main(String[] ags) { IntByReference.swapper(21, 16); IntByReference.swapper(16, 21); IntByReference.swapper(16, -1); } } IntByReference.main(null); . Before: 21 16 After: 16 21 Before: 16 21 After: 16 21 Before: 16 -1 After: -1 16 .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2023/03/07/tt.html",
            "relUrl": "/jupyter/2023/03/07/tt.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Primitive Types",
            "content": "Int, Boolean, Char, Double . public class intdemo{ public static void main(String[] args) { int i = 5; int[] array = new int[]{ 1,2,3,4,5 }; System.out.println(array[1]); for(int j = 0; j &lt; array.length;j++) { System.out.print(array[j]); } } public static void chartest() { System.out.println(&quot;doubles&quot;); double[] doubloon = new double[]{0.0,1.1,2.2,3.3,4.4,5.5}; System.out.println(doubloon[0]); for (int i = 0; i &lt; doubloon.length; i++) { System.out.print(doubloon[i]); } } public static void bool() { } } intdemo.main(null); intdemo.chartest(); intdemo.bool(); . import java.util.Random; public class PrimitiveTypes { public static void main(String[] args) { // int example using array and substring method int[] intArray = {1, 2, 3, 4, 5}; String intString = Integer.toString(intArray[2]); System.out.println(&quot;The third element in intArray is: &quot; + intString.substring(0, 1)); // double example using random method double randomNumber = Math.random(); System.out.println(&quot;Random number between 0 and 1: &quot; + randomNumber); // boolean example using array boolean[] boolArray = {true, false, false, true, true}; System.out.println(&quot;The fourth element in boolArray is: &quot; + boolArray[3]); // char example using array char[] charArray = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;}; System.out.println(&quot;The second element in charArray is: &quot; + charArray[1]); // Converting int example to Integer wrapper class using array Integer[] integerArray = new Integer[intArray.length]; for (int i = 0; i &lt; intArray.length; i++) { integerArray[i] = Integer.valueOf(intArray[i]); } System.out.println(&quot;The third element in integerArray is: &quot; + integerArray[2]); // Converting double example to Double wrapper class using array Double[] doubleArray = new Double[1]; doubleArray[0] = Double.valueOf(randomNumber); System.out.println(&quot;Random number in Double wrapper class: &quot; + doubleArray[0]); // Converting boolean example to Boolean wrapper class using array Boolean[] booleanArray = new Boolean[boolArray.length]; for (int i = 0; i &lt; boolArray.length; i++) { booleanArray[i] = Boolean.valueOf(boolArray[i]); } System.out.println(&quot;The fourth element in booleanArray is: &quot; + booleanArray[3]); // Converting char example to Character wrapper class using array Character[] characterArray = new Character[charArray.length]; for (int i = 0; i &lt; charArray.length; i++) { characterArray[i] = Character.valueOf(charArray[i]); } System.out.println(&quot;The second element in characterArray is: &quot; + characterArray[1]); } } PrimitiveTypes.main(null); . FRQ 2017 #3 . public class Phrase { private String currentPhrase; /**Constructs a new phrase object */ public Phrase(String p) { currentPhrase = p; } /** Returns the index of the nth occurrence of str in the current phrase; * returns -1 if the nth occurence doesn&#39;t exist * Precondition: str.length() &gt; 0 and n &gt; 0 * Postcondition: the current phrase is not modified * */ public int findNthOccurrence(String str, int n) { } public void replaceNthOccurrence(String str, int n, String repl) { int indexOfString = findNthOccurrence(str, n); //find starting index in currentPhrase //control structure, selection structure, if statement if(indexOfString != -1){ //if string found at least n times String leadingStr = this.currentPhrase.substring(0, indexOfString); //get leading before nth String trailingStr = this.currentPhrase.substring(indexOfString + str.length()); //trailing part after this.currentPhrase = leadingStr + repl + trailingStr; //replace nth occurance with replacement } } // iteration --&gt; while loop // --&gt; keep repeating the loop until findNthOccurrence return -1 // --&gt; (findNthOccurrence(..) != -1) public int findLastOccurrence(String str) { int i = 1; //control structures //use of conditional statements like while loop while(findNthOccurrence(str, i) != -1) { i++; } return findNthOccurrence(str, i); } public String toString() { return currentPhrase; } } .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2023/03/07/primitivetypes.html",
            "relUrl": "/jupyter/2023/03/07/primitivetypes.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Prep for tt",
            "content": "public class seed{ public static void main(String[] args) { int a = 1; int b = 1; int sum = a + b; System.out.println(sum); int test = 1; int number = 10; int remainder = test % number ; System.out.println(remainder); while (test &gt; 0){ } } } seed.main(null); . 2 1 . import java.util.Scanner; public class BinaryAddition { public static void main(String[] args) { int b1, b2; //define both variables int i = 0, remainder = 0; //I is the index of the variable, remainder is the int[] sum = new int[10]; //holds it in an array Scanner scanner = new Scanner(System.in); //read input with scanner System.out.print(&quot;Enter first number: &quot;); b1 = scanner.nextInt(); System.out.print(&quot;Enter second number: &quot;); b2 = scanner.nextInt(); while (b1 != 0 || b2 != 0) //while the numbers are positive { sum[i++] = (int)((b1 % 10 + b2 % 10 + remainder) % 2); // goes down in decimal places, and then takes the remainder of division by 2 remainder = (int)((b1 % 10 + b2 % 10 + remainder) / 2); // remainder is going to be if it isn&#39;t divisible b1 = b1 / 10; //goes down a tenth b2 = b2 / 10; //goes down a tenth } if (remainder != 0) { //if there isn&#39;t a remainder then it equals that number(a 1) sum[i++] = remainder; } System.out.print(&quot;Output: &quot;); while (i &gt;= 0) { System.out.print(sum[i--]); // prints it going backwards } } } BinaryAddition.main(null); . Enter first number: Enter second number: Output: 020 .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2023/03/06/prep.html",
            "relUrl": "/jupyter/2023/03/06/prep.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "52 MC",
            "content": ". Q12: . I chose B because I thought that that was right. It turned out that the order was reversed, which makes C the right answer. . Q13: I chose C because I thought that it would return this. It is wrong because all is assigned a value that does not contain art, and that makes B the right answer. This one was a silly mistake. . Q18: . E is wrong because an enhanced loop is used, which the value of num is not a column value. D is right because it is a column value. . Q23: . C is wrong because the subtracting 1 would skip the last value. I didn&#39;t see this clearly and that I thought that this was the right answer. I made another silly mistake . Q25: . D is wrong because that the list is completely wrong. If the loop was k&gt;1 it would be right. I think that I quickly saw through the list, I saw bear and I chose it. . Q31: . B is wrong because the outer loop uses j, which is a row, and it is used as int instead of int[]. Which D has. . Q35: . A is wrong because it would print it the wrong way, printing it from left to right. C is right because it is in the right orientation. . Q44: . C is wrong because it starts off at +2, which is wrong. D is right because it starts at k=j+1. . Q45: . B is wrong because it updates 4 times instead of 5 times. . Q51: . C is wrong because it doesn&#39;t include 3. I didn&#39;t check the third condition, or I didn&#39;t check it correctly because I thought that it didn&#39;t fit. . Q52: . B is wrong because it would require loops to check for even and odd rows. I think that the images really confused me, and that near the end of the test I wasn&#39;t really wanting to complete the test. .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2023/01/30/55MC.html",
            "relUrl": "/jupyter/2023/01/30/55MC.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "66 MC",
            "content": "Score: 53/66 I think I started to fail at the end. I think that I need to practice sitting down and testing for a longer period of time because I wasn&#39;t doing it all in one go. . Q12: . . I chose B because I thought that or would be right. However, A is the right answer. B is wrong because it is always going to be either or, which is not what we want. . Q19: I chose C because I thought that it being and would make it equal. However, it is not right because it is equal to or greater than. I didn&#39;t convert demorgans right. . Q20: . I chose C because I thought that it would be offset. However, it would end up ending too early, and printing a digit short. . Q25 . . I chose C because I thought that it didn&#39;t have a parameter, however, there is a parameter used. B is correct because updateItems does not hae a return type, nothing is returned. . Q34 . . I chose A because I thought that it would add the 2 multiplied by the number k, however, it does not do that. D is right because it multiplies it by the value of the array. . Q36: . . I chose E because I thought that both arraylist locations would be wrong, but it is onl line 4 which is wrong. . Q41: . I chose D because I ran through it wrong. D returns 12, instead of the 11 that is wanted. . Q56: . I chose B because I thought that there was an issue with the while statement, but there should be an else after the if statement. . Q64: . I chose C because I didn&#39;t really understand the for loop. . Q65: . I chose C because I thought that it would add up to 105. However, I did my math wrong because it is supposed to be 115 . Q66: . I chose C because I thought that it would be the same thing. However, it should be printed and then incremented, like it is shown in B. .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2023/01/22/MC.html",
            "relUrl": "/jupyter/2023/01/22/MC.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 6-10 Check",
            "content": "Unit 6 - ArrayList arrays are a data storage type . intialize with constructors https://kkwan0.github.io/KurtisFP/jupyter/2022/11/08/unit6.html | . Unit 7 - Arraylist . arraylist values can be changed | go through with for loops or enhanced for loops | . HW: Fun Quizziz!!! . import java.util.ArrayList; public class methodsArrayList { public static void main (String[] args) { ArrayList&lt;String&gt; dogs = new ArrayList&lt;String&gt;(Arrays.asList(&quot;Sparky&quot;, &quot;Duke&quot;, &quot;Noodle&quot;)); ArrayList&lt;String&gt; dogs2 = new ArrayList&lt;&gt;(Arrays.asList(&quot;Sparky&quot;, &quot;Duke&quot;, &quot;Noodle&quot;)); System.out.println(&quot;There are &quot; + dogs.size() + &quot; in the ArrayList&quot;); System.out.println(&quot;There are &quot; + dogs2.size() + &quot; in the ArrayList&quot;); //objects you add must be of the same data type dogs.add(&quot;Peanut&quot;); System.out.println(&quot;There are now &quot; + dogs.size() + &quot; dogs in the ArrayList&quot;); String myDog = dogs.get(2); System.out.println(&quot;My dog is named &quot; + myDog); } } //Note: you don&#39;t need to declare &lt;String&gt; again after new ArrayList methodsArrayList.main(null); . There are 3 in the ArrayList There are 3 in the ArrayList There are now 4 dogs in the ArrayList My dog is named Noodle . Unit 8 - 2D Array . 2D arrays have an extra index, 2D | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String match = &quot;&quot;; String name = &quot;Boston&quot;; for (String[] row : arr) { for (String item : row) { if (item.equals(name)) { match = name; } } } if (match.length() == 0) { System.out.println(&quot;No Match!&quot;); } else { System.out.println(name); } } } Test.main(null); . Boston . Unit 9 - Inheritance . Inheritance, order in which attributes, methods and strings called | constructor - where attributes are defined | overriding - subclass or child class can get overridden with another method in subclass | polymorphism - running multiple things with same name | super keyword, use superclass in subclass | . Unit 10 - Recursion . recursion is when method calls itself within itself | binary search | selection sort - find minimum from unsorted, put on end of sorted | merge - split in 2, sort both halves, then merge | . HW: Google Form . public int factorial(int n) //factorial of thing { if (n == 1) //if 1, return 1 return 1; else return n*factorial(n-1); //if it isnt 0 } .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/12/14/6-10vocab.html",
            "relUrl": "/jupyter/2022/12/14/6-10vocab.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "FRQ 4",
            "content": "public class LightBoard{ /** The lights on the board, where true represents on and false represents off. */ private boolean[][] lights; /** Constructs a LightBoard object having numRows rows and numCols columns. * Precondition: numRows &gt; 0, numCols &gt; 0 * Postcondition: each light has a 40% probability of being set to on. */ public LightBoard(int numRows, int numCols){ lights = new boolean[numRows][numCols]; for (int i = 0; i &lt; numRows; i++) {//for loops for (int j = 0; j &lt; numCols; j++) { lights[i][j] = Math.random() &lt; 0.4;// random chance of being on 40 percent } } } /** Evaluates a light in row index row and column index col and returns a status * as described in part (b). * Precondition: row and col are valid indexes in lights. */ public boolean evaluateLight(int row, int col){ //first find out how many are on in column int columnLights = 0; for (int i = 0; i &lt; lights.length; i++) { if (lights[i][col]) { columnLights++; } } //next check conditions for light if (lights[row][col] == true &amp;&amp; columnLights % 2 == 0) {//first condition return false; } else if (lights[row][col] == false &amp;&amp; columnLights % 3 == 0) {//second condition return true; } else {//last condition return lights[row][col]; } } public static void main(String[] args) { //tester method LightBoard tester = new LightBoard(10,10); System.out.println(tester.evaluateLight(3,6)); System.out.println(tester.evaluateLight(2,5)); System.out.println(tester.evaluateLight(0,8)); System.out.println(tester.evaluateLight(2,9)); } } LightBoard.main(null); . false true true .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/12/13/frq4.html",
            "relUrl": "/jupyter/2022/12/13/frq4.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 9 Leson",
            "content": "9.5 Creating References Using Inheritance Hierarchies . Inheritance Hierarchies . (image thing) Type Diagram . It is similar to looking at it like a family tree. A is the superclass, or the head of the family. The descendants are the subclasses. . So . public class A public class B extends A public class C extends B . A Reference refers to an object of the class, or the object of an inherited class. So an Inheritance Hierarchy can create references .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/12/12/Unit9.5.html",
            "relUrl": "/jupyter/2022/12/12/Unit9.5.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 6 HW",
            "content": "Arrays | arrays are a data storage type | intialize with constructors | . Important Words: . - . HW: FRQ A. . public void addMembers(String[] names, int gradYear) { for (String name : names) { MemberInfo member = new MemberInfo(name, gradYear, true); memberList.add(member); } } . Hacks: . 1 . int[] arrayOne = {1, 3, 5, 7, 9}; for (int num : arrayOne) { if (num % 2 == 0) { System.out.println(num); } } . 2: B . 3: . import java.util.Arrays; public class arraySorter { public static void main(int[] a) { Arrays.sort(a); for (int i : a) { System.out.println(i); } } } int[] myNumbers = new int[] {5, 3, 4, 1, 2}; arraySorter.main(myNumbers); . 1 2 3 4 5 . 4: b . 5: . public class ForEachDemo { public static void main(String[] args) { int[] highScores = { 10, 9, 8, 8}; String[] names = {&quot;Jamal&quot;, &quot;Emily&quot;, &quot;Destiny&quot;, &quot;Mateo&quot;}; // for each loop with an int array for (int value : highScores) { System.out.println( value ); } // for each loop with a String array for (String value : names) { System.out.println(value); // this time it&#39;s a name! } } } . 6: D . 7. . public class leftShifted { public static int[] main(int[] a) { int first = a[0]; for (int i=1; i&lt;a.length; i++) { a[i-1] = a[i]; } a[a.length-1] = first; return a; } } int[] array = {7,9,4}; int[] array_out = leftShifted.main(array); Arrays.toString(array_out) . [9, 4, 7] . 8. . public class findDuplicate { public static int main(int[] a, int b) { int d=0; for (int number : a) { if (number==b) { d++; } } return d; } } int[] array = {7,7,9,4}; findDuplicate.main(array, 7); . 2 . 9. . public class reverseString { public static char[] main(char[] s) { char[] reverse = new char[s.length]; for (int i=s.length-1; i&gt;=0; i--) { reverse[s.length-i-1] = s[i]; } return reverse; } } String s = &quot;hello&quot;; char[] c = s.toCharArray(); char[] reverse = reverseString.main(c); // Arrays.toString(reverse) String reversed = new String(reverse); System.out.println(reversed); . olleh .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/11/08/unit6.html",
            "relUrl": "/jupyter/2022/11/08/unit6.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 5 HW",
            "content": "writing classes | classes are blueprints | instances are like methods, objects, attributes | public classes have no restriction, private have restrictions | accessor have other objects to get values of variables | non void have single value | . Important Words: . Nested Loops - a loop inside of another loop | Comparing numbers - determining if a number is greater, equal to, less than | Comparing strings - comparing values of strings | Comparing objects | . FRQ 2019 . public class StepTracker { private int lowerBound; private int steps; private int totalDays; private int activeDays; public StepTracker(int minSteps) { lowerBound = minSteps; steps = 0; totalDays = 0; activeDays = 0; } public void addDailySteps(int newSteps) { steps += newSteps; totalDays += 1; if (newSteps &gt;= lowerBound) { activeDays += 1; } } public int activeDays(){ return activeDays; } public double averageSteps() { if (totalDays == 0) { return (double) totalDays; } else { return (double) steps / totalDays; } } public static void main(String[] args){ StepTracker tr = new StepTracker(10000); System.out.println(tr.activeDays()); System.out.println(tr.averageSteps()); tr.addDailySteps(9000); System.out.println(tr.averageSteps()); tr.addDailySteps(23000); System.out.println(tr.activeDays()); } } StepTracker.main(null); . 0 0.0 9000.0 1 .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/11/08/unit5.html",
            "relUrl": "/jupyter/2022/11/08/unit5.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 4 HW",
            "content": "Iteration | while/for loops | strings, array | nested loops | . Important Words: . for loop - statement that executes depending on the condition | enhanced for loop - for loops that is executed in a sequence, counter always increased by one | static method - method that belongs to the class, not the instance of a class, can be called on by the class, not the object | static variable - variable that remains throughout the entire program | | . Homework . public class CaesarCipher { public String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; public String temp; // Method which takes a string and swaps a character static char[] swap(String str, int i, char j) { char ch[] = str.toCharArray(); ch[i] = j; return ch; } public String Calc(String message) { temp = message; // Looping through each character in the message for (int i=0; i&lt;temp.length(); i++) { // Cast the character to ascii to make substitutions much more efficient int ascii = (int) temp.charAt(i); // Letters at the end of the alphabet behave differently, so we create two separate conditionals if (ascii &gt; 64 &amp;&amp; ascii &lt; 88 || (ascii &gt; 96 &amp;&amp; ascii &lt; 120)) { ascii = ascii + 3; String tempSwap = new String(swap(temp, i, (char) ascii)); temp = tempSwap; } // This is for the last three letters of the alphabet else if (ascii &gt; 87 &amp;&amp; ascii &lt; 91 || ascii &gt; 119 &amp;&amp; ascii &lt; 123) { ascii = ascii - 23; String tempSwap = new String(swap(temp, i, (char) ascii)); temp = tempSwap; } } return temp; } public static void main(String[] args) { CaesarCipher cipherCalc = new CaesarCipher(); String message1 = &quot;Kfzb gly!&quot;; String message2 = &quot;zlab zlab zlab&quot;; String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; System.out.println(cipherCalc.Calc(message1)); System.out.println(cipherCalc.Calc(message2)); System.out.println(cipherCalc.Calc(message3)); } } CaesarCipher.main(null); . Nice job! code code code supercalifragilisticexpialidocious . Hacks: Hack 1 . public class WhileLoops { public double money = 0; public double profit = 5450000; public double goal = 30000000; public double years = 0; public void Calc() { while (this.money &lt; this.goal) { this.money = this.money + this.profit; this.profit = this.profit * 1.05; this.years = this.years + 1; } System.out.println(this.years); } public static void main(String[] args) { WhileLoops obj = new WhileLoops(); obj.Calc(); } } WhileLoops.main(null); . 5.0 . Hack 2 . public class ForLoops { public double temp = 0; public void Calc() { System.out.println(&quot;Numbers 10-15&quot;); for (int x = 10; x &lt;= 15; x++) { System.out.println(x); } System.out.println(&quot;Convert temperature&quot;); for (int x = 0; x&lt;=100; x+=10) { temp = 0; temp = x + 273.15; System.out.println(x + &quot;c -&gt; &quot; + temp + &quot;k&quot;); } } public static void main(String[] args) { ForLoops obj = new ForLoops(); obj.Calc(); } } ForLoops.main(null); . Numbers 10-15 10 11 12 13 14 15 Convert temperature 0c -&gt; 273.15k 10c -&gt; 283.15k 20c -&gt; 293.15k 30c -&gt; 303.15k 40c -&gt; 313.15k 50c -&gt; 323.15k 60c -&gt; 333.15k 70c -&gt; 343.15k 80c -&gt; 353.15k 90c -&gt; 363.15k 100c -&gt; 373.15k .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/11/08/unit4.html",
            "relUrl": "/jupyter/2022/11/08/unit4.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 3 HW",
            "content": "Boolean | boolean, if else statements,else if statements | demorgan | . Important Words: . - demorgans law - not a and b is equal to not a or not b, and not a or b is equal to not a and not b . Conditionals Homework . 2 . import java.util.Scanner; public class Exercise2 { public static void main(String[] Strings) { Scanner input = new Scanner(System.in); System.out.print(&quot;Input a: &quot;); double a = input.nextDouble(); System.out.print(&quot;Input b: &quot;); double b = input.nextDouble(); System.out.print(&quot;Input c: &quot;); double c = input.nextDouble(); double result = b * b - 4.0 * a * c; if (result &gt; 0.0) { double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a); double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a); System.out.println(&quot;The roots are &quot; + r1 + &quot; and &quot; + r2); } else if (result == 0.0) { double r1 = -b / (2.0 * a); System.out.println(&quot;The root is &quot; + r1); } else { System.out.println(&quot;The equation has no real roots.&quot;); } } } Exercise2.main(null); . Input a: Input b: Input c: The equation has no real roots. . 4 . import java.util.Scanner; public class Exercise4 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input value: &quot;); double input = in.nextDouble(); if (input &gt; 0) { if (input &lt; 1) { System.out.println(&quot;Positive small number&quot;); } else if (input &gt; 1000000) { System.out.println(&quot;Positive large number&quot;); } else { System.out.println(&quot;Positive number&quot;); } } else if (input &lt; 0) { if (Math.abs(input) &lt; 1) { System.out.println(&quot;Negative small number&quot;); } else if (Math.abs(input) &gt; 1000000) { System.out.println(&quot;Negative large number&quot;); } else { System.out.println(&quot;Negative number&quot;); } } else { System.out.println(&quot;Zero&quot;); } } } Exercise4.main(null); . Input value: Positive number . 6 . import java.util.Scanner; public class Exercise6 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input floating-point number: &quot;); double x = in.nextDouble(); System.out.print(&quot;Input floating-point another number: &quot;); double y = in.nextDouble(); x = Math.round(x * 1000); x = x / 1000; y = Math.round(y * 1000); y = y / 1000; if (x == y) { System.out.println(&quot;They are the same up to three decimal places&quot;); } else { System.out.println(&quot;They are different&quot;); } } } Exercise6.main(null); . Input floating-point number: Input floating-point another number: They are different . 8 . import java.util.Scanner; public class Exercise8 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input an alphabet: &quot;); String input = in.next().toLowerCase(); boolean uppercase = input.charAt(0) &gt;= 65 &amp;&amp; input.charAt(0) &lt;= 90; boolean lowercase = input.charAt(0) &gt;= 97 &amp;&amp; input.charAt(0) &lt;= 122; boolean vowels = input.equals(&quot;a&quot;) || input.equals(&quot;e&quot;) || input.equals(&quot;i&quot;) || input.equals(&quot;o&quot;) || input.equals(&quot;u&quot;); if (input.length() &gt; 1) { System.out.println(&quot;Error. Not a single character.&quot;); } else if (!(uppercase || lowercase)) { System.out.println(&quot;Error. Not a letter. Enter uppercase or lowercase letter.&quot;); } else if (vowels) { System.out.println(&quot;Input letter is Vowel&quot;); } else { System.out.println(&quot;Input letter is Consonant&quot;); } } } Exercise8.main(null); . Input an alphabet: Input letter is Vowel . 10 . public class Exercise10 { public static void main(String[] args) { int i; System.out.println (&quot;The first 10 natural numbers are: n&quot;); for (i=1;i&lt;=10;i++) { System.out.println (i); } System.out.println (&quot; n&quot;); } } Exercise10.main(null); . The first 10 natural numbers are: 1 2 3 4 5 6 7 8 9 10 . Question 12 . import java.util.Scanner; public class Exercise12 { public static void main(String[] args) { int i,n=0,s=0; double avg; { System.out.println(&quot;Input the 5 numbers : &quot;); } for (i=0;i&lt;5;i++) { Scanner in = new Scanner(System.in); n = in.nextInt(); s +=n; } avg=s/5; System.out.println(&quot;The sum of 5 no is : &quot; +s+&quot; nThe Average is : &quot; +avg); } } Exercise12.main(null); . Input the 5 numbers : The sum of 5 no is : 35 The Average is : 7.0 . 14 . import java.util.Scanner; public class Exercise14 { public static void main(String[] args) { int j,n; System.out.print(&quot;Input the number(Table to be calculated): &quot;); { System.out.print(&quot;Input number of terms : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); System.out.println (&quot; n&quot;); for(j=0;j&lt;=n;j++) System.out.println(n+&quot; X &quot;+j+&quot; = &quot; +n*j); } } } Exercise14.main(null); . Input the number(Table to be calculated): Input number of terms : 0 X 0 = 0 . 16 . import java.util.Scanner; public class Exercise16 { public static void main(String[] args) { int i,j,n; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(j); System.out.println(&quot;&quot;); } } } Exercise16.main(null); . Input number of rows : 1 . 18 . import java.util.Scanner; public class Exercise18 { public static void main(String[] args) { int i,j,n,k=1; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(k++); System.out.println(&quot;&quot;); } } } Exercise18.main(null); . Input number of rows : 1 23 . 20 . import java.util.Scanner; public class Exercise20 { public static void main(String[] args) { int numberOfRows; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); numberOfRows = in.nextInt(); int number = 1; for (int row = 1; row &lt;= numberOfRows; row++) { for (int column = 1; column &lt;= row; column++) { System.out.print(number + &quot; &quot;); number++; } System.out.println(); } } } Exercise20.main(null);4 . Input number of rows : 1 2 3 4 5 6 .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/11/08/unit3.html",
            "relUrl": "/jupyter/2022/11/08/unit3.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 2 HW",
            "content": "Unit 2 Objects . classes are blueprints for objects | objects are instances inside of a class | method is code that runs a task | attributes are inherited by objects | void methods do not return values | overloaded methods give multiple methods with same name with different signatures | . Important Words . main method - method that can usually execute code from other methods &quot;public int scoreGuess&quot; | tester method - method that is used to test if its working | compound boolean method - use of operators like &amp;&amp;, ||, ! | public access modifier - method that can be accessed outside of the class, or any class | private access modifier - modifier that can only be accessed inside of the class | protected access modifier - modifier that can be accessed by inheritance . | Truth Table . | . FRQ . 1a . public int scoreGuess(String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length(); } . 1b . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/11/08/unit2.html",
            "relUrl": "/jupyter/2022/11/08/unit2.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 1 HW",
            "content": "Primitives: Notes: . boolean, char, int, float, and double are both primitive data types | string, arrays are not primitives | declare variable that can be accesible, how to store data as variables | operations are going to be +, -, *, /, % | compound is +-, -=, *=, /=, %= | increment is ++ or -- | . Important words: . Constructor - constructor initializes object, no return value, just initializes the object | Accessor methods - &quot;getters&quot; returns values in defined class or reads the value. (get&quot;classname&quot;) | mutator methods - &quot;setters&quot; sets parameters for attribute, updates variable values, (set&quot;classname&quot;) | this keyword - object in constructor, used in setters to set variables | Casting - assigning one data type to another data type, | Casting - rounding - dividing non even numbers, rounds up, truncating is rounding down. | . Calc . import java.util.*; public class gradecalc { public static void main(String[] args) { Scanner sc = new Scanner(System.in); // scans input System.out.println(&quot;Final is part of the test category? true or false&quot;); //prints question boolean finalIsTest = sc.nextBoolean(); if (finalIsTest) { System.out.println(&quot;Current grade:&quot;); //scans for current grade, double to include the decimal stuff double grade = sc.nextDouble(); System.out.println(&quot;What percent of your grade is the tests category?&quot;); int testsPercent = sc.nextInt(); System.out.println(&quot;Your current grade (in tests category)?&quot;); double testsGrade = sc.nextDouble(); System.out.println(&quot;Total points in tests category currently?&quot;); int testsPoints = sc.nextInt(); System.out.println(&quot;Amount of points:&quot;); int finalPoints = sc.nextInt(); System.out.println(&quot;The grade you want:&quot;); double finalgrade = sc.nextDouble(); double percentReq = finalgrade - (grade - testsGrade * testsPercent/100.0); double testPointsNeeded = (percentReq/testsPercent) * (testsPoints + finalPoints); double finalPointsNeeded = testPointsNeeded - testsPoints; //calculates all the things System.out.println(&quot;You need a &quot; + finalPointsNeeded + &quot; on the final.&quot;); } else { //else statement, what you need on the final to get grade System.out.println(&quot;What is your current grade?&quot;); double grade = sc.nextDouble(); System.out.println(&quot;How much percent of your grade is the final?&quot;); int finalPercent = sc.nextInt(); System.out.println(&quot;What is your desired grade?&quot;); double target = sc.nextDouble(); double percentReq = target - (grade/100.0)*(100.0-finalPercent); double gradeNeeded = 100.0 * (percentReq/finalPercent); System.out.println(&quot;You need a &quot; + gradeNeeded + &quot; on the test.&quot;); } } } gradecalc.main(null); . Final is part of the test category? true or false Current grade: What percent of your grade is the tests category? Your current grade (in tests category)? Total points in tests category currently? Amount of points: The grade you want: You need a 155.0 on the final. .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/11/08/unit1.html",
            "relUrl": "/jupyter/2022/11/08/unit1.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "CB Multiple Choice",
            "content": "Score: 34/40 . Corrections: . Q4: . I chose D because I swapped the x and the y around. So I would end up dividing 3 by 7. . . Q5: . I chose B because I thought that k started at 0. I didn’t read the question carefully . Q8: . I chose A because I didn’t carefully put in II. I initially thought that only I would fit. C is the right answer because II also fits. II fits because it will also compile the age, since the age is not a string. . Q15: . I chose C because I thought that it would be able to go through the array. However, in an enhanced for loop x is a value, and this answer uses it as an index. A is the right answer because it prints x. . Q26: . I chose C because I thought that it would be able to go through the array. However, in an enhanced for loop x is a value, and this answer uses it as an index. A is the right answer because it prints x. . Q31: . I chose B because I made a mistake when choosing the answer. I meant to choose C, but I think that my hand slipped. . . Reflection: I think that I did pretty well. I think that a 33/40 is a pretty good score. However, I think that I could have done better because most of the mistakes that I made are simple mistakes. If I take a couple more I think that I will be able to knock out some of these simple mistakes. .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/11/06/CBMC2.html",
            "relUrl": "/jupyter/2022/11/06/CBMC2.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "CB Unit 2",
            "content": "1a . public int scoreGuess(String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length(); } . 1b . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/10/23/CBUNIT2.html",
            "relUrl": "/jupyter/2022/10/23/CBUNIT2.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Title",
            "content": "&gt; college board units 1 and 2 - toc: true - badges: true - comments: true - categories: [jupyter] - image: . Unit 1 Primitavees . String literal - an sequence of characters between two quotation marks . Different Errors -Syntax/compiler error: program won&#39;t compile due to typos -Exception -Logic error: actual output differs from anticipated output . Data Types . -Determine what type of value is stored ### Variables -variable: name for memory location holding a certain type of value -no spaces -can&#39;t start with # -no special characters (anything besides letters/digits) -no Java reserved keywords -use camelCase conventions #### Declaring -assignment operator (=) is used to initialize variable or change its associated value ### Primitive Examples: -boolean (1 bit) -int (32 bits) -if the integer result of an expression is beyond the range there will be an overflow error -double (64 bits) ### Reference Arthmetic Operators -INCLUDES: +, -, , /, % -operations with only int ==&gt; output int -operations with only double ==&gt; output double -operations with both int and double ==&gt; output double -division by zero ==&gt; ArithmeticException Compound Assignment Operators and Incrememt/Decrement Operators -+=, -=, *=, /=, %= -Using these will change the value of the variable to the result of the operation -Increment/Decrement: . ++: adds 1 | --: subtracts 1 | . Unit 2 Using Objects . Constructors -Used to initialize attributes for an object . Vocab -signature: constructor name and parameter list . -parameter list: lists type of values passed and their variable names (formal parameters) . -parameter: value passed into a constructor (actual parameters), must match types specified in parameter list call by value: initializes formal parameters with copies of the actual parameters overloaded constructors: there are multiple constructors with same name, differing signatures . -no argument constructor: constructor with no parameters, sets attributes (instance variables) of object to default values . -String: null -boolean: false -null: variable reference doesn&#39;t actually contain an object .",
            "url": "https://paulman420.github.io/KurtisFP/2022/10/16/cbnotes.html",
            "relUrl": "/2022/10/16/cbnotes.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "images",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;cat&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String grayScaledFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Changing to go by blocks 3 times as wide as tall for (int i = 0; i &lt; img.getHeight(); i+=3) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // Gray scale method public void GrayScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (red+green+blue)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorGray = new Color(avg, avg, avg); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorGray.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;graycat&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void GreenScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (green)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorGreen = new Color(avg, green, avg); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorGreen.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;greencat&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void RedScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (red+red)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorRed = new Color(red, avg, avg); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorRed.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;redcat&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void BlueScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (blue+blue)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorBlue = new Color(avg, avg, blue); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorBlue.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;bluecat&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics cat = new Pics(&quot;cat&quot;, &quot;png&quot;); cat.GrayScale(); cat.GreenScale(); cat.BlueScale(); cat.RedScale(); cat.printStats(&quot;Original&quot;); cat.resize(33); cat.printStats(&quot;Scaled&quot;); cat.convertToAscii(); } } Pics.main(null); . Original: 857002 698x737 images/cat.png Scaled: 120701 230x243 images/tmp/cat.png .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/10/01/images.html",
            "relUrl": "/jupyter/2022/10/01/images.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "API",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://weatherbit-v1-mashape.p.rapidapi.com/forecast/3hourly?lat=35.5&amp;lon=-78.5&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;032f716b5amsh1241419d17ff651p1d3c54jsna32e706ab7f6&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;weatherbit-v1-mashape.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;lon&#34;:-78.5,&#34;timezone&#34;:&#34;America /New_York&#34;,&#34;country_code&#34;:&#34;US&#34;,&#34;lat&#34;:35.5,&#34;data&#34;:[{&#34;dni&#34;:887.58,&#34;wind_cdir&#34;:&#34;NW&#34;,&#34;rh&#34;:54,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1009,&#34;wind_spd&#34;:4.16,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;northwest&#34;,&#34;slp&#34;:1015.5,&#34;datetime&#34;:&#34;2022-10-04:18&#34;,&#34;ts&#34;:1664906400,&#34;pop&#34;:0,&#34;ozone&#34;:293,&#34;dewpt&#34;:7.4,&#34;uv&#34;:6,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:317,&#34;timestamp_utc&#34;:&#34;2022-10-04T18:00:00&#34;,&#34;ghi&#34;:760.49,&#34;dhi&#34;:113.23,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01d&#34;,&#34;code&#34;:800},&#34;temp&#34;:16.8,&#34;vis&#34;:36.192,&#34;app_temp&#34;:16.8,&#34;solar_rad&#34;:760.49,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:8.48,&#34;timestamp_local&#34;:&#34;2022-10-04T14:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:690.48,&#34;wind_cdir&#34;:&#34;NW&#34;,&#34;rh&#34;:51,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1007,&#34;wind_spd&#34;:4.53,&#34;clouds&#34;:11,&#34;wind_cdir_full&#34;:&#34;northwest&#34;,&#34;slp&#34;:1014,&#34;datetime&#34;:&#34;2022-10-04:21&#34;,&#34;ts&#34;:1664917200,&#34;pop&#34;:0,&#34;ozone&#34;:296,&#34;dewpt&#34;:7.3,&#34;uv&#34;:1.9,&#34;clouds_low&#34;:11,&#34;wind_dir&#34;:315,&#34;timestamp_utc&#34;:&#34;2022-10-04T21:00:00&#34;,&#34;ghi&#34;:323.87,&#34;dhi&#34;:79.79,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Few clouds&#34;,&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:801},&#34;temp&#34;:17.6,&#34;vis&#34;:38.496,&#34;app_temp&#34;:17.6,&#34;solar_rad&#34;:323.70953,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:9.65,&#34;timestamp_local&#34;:&#34;2022-10-04T17:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;NNW&#34;,&#34;rh&#34;:66,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1008.5,&#34;wind_spd&#34;:1.76,&#34;clouds&#34;:65,&#34;wind_cdir_full&#34;:&#34;north-northwest&#34;,&#34;slp&#34;:1015,&#34;datetime&#34;:&#34;2022-10-05:00&#34;,&#34;ts&#34;:1664928000,&#34;pop&#34;:0,&#34;ozone&#34;:295.3,&#34;dewpt&#34;:8,&#34;uv&#34;:0,&#34;clouds_low&#34;:65,&#34;wind_dir&#34;:331,&#34;timestamp_utc&#34;:&#34;2022-10-05T00:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Broken clouds&#34;,&#34;icon&#34;:&#34;c03n&#34;,&#34;code&#34;:803},&#34;temp&#34;:14.3,&#34;vis&#34;:26.096,&#34;app_temp&#34;:14.3,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:6.17,&#34;timestamp_local&#34;:&#34;2022-10-04T20:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;WNW&#34;,&#34;rh&#34;:75,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1008.5,&#34;wind_spd&#34;:1.61,&#34;clouds&#34;:18,&#34;wind_cdir_full&#34;:&#34;west-northwest&#34;,&#34;slp&#34;:1015,&#34;datetime&#34;:&#34;2022-10-05:03&#34;,&#34;ts&#34;:1664938800,&#34;pop&#34;:0,&#34;ozone&#34;:294.8,&#34;dewpt&#34;:7.8,&#34;uv&#34;:0,&#34;clouds_low&#34;:18,&#34;wind_dir&#34;:284,&#34;timestamp_utc&#34;:&#34;2022-10-05T03:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Few clouds&#34;,&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:801},&#34;temp&#34;:12.1,&#34;vis&#34;:21.088,&#34;app_temp&#34;:12.1,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:3.29,&#34;timestamp_local&#34;:&#34;2022-10-04T23:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;WSW&#34;,&#34;rh&#34;:82,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1007.5,&#34;wind_spd&#34;:2.5,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;west-southwest&#34;,&#34;slp&#34;:1015,&#34;datetime&#34;:&#34;2022-10-05:06&#34;,&#34;ts&#34;:1664949600,&#34;pop&#34;:0,&#34;ozone&#34;:293.8,&#34;dewpt&#34;:7.3,&#34;uv&#34;:0,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:257,&#34;timestamp_utc&#34;:&#34;2022-10-05T06:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01n&#34;,&#34;code&#34;:800},&#34;temp&#34;:10.2,&#34;vis&#34;:17.488,&#34;app_temp&#34;:10.2,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:5.27,&#34;timestamp_local&#34;:&#34;2022-10-05T02:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;W&#34;,&#34;rh&#34;:83,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1007,&#34;wind_spd&#34;:2.53,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;west&#34;,&#34;slp&#34;:1014.5,&#34;datetime&#34;:&#34;2022-10-05:09&#34;,&#34;ts&#34;:1664960400,&#34;pop&#34;:0,&#34;ozone&#34;:294.8,&#34;dewpt&#34;:6.9,&#34;uv&#34;:0,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:281,&#34;timestamp_utc&#34;:&#34;2022-10-05T09:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01n&#34;,&#34;code&#34;:800},&#34;temp&#34;:9.7,&#34;vis&#34;:16.688,&#34;app_temp&#34;:9.7,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:5.8,&#34;timestamp_local&#34;:&#34;2022-10-05T05:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:440.1,&#34;wind_cdir&#34;:&#34;W&#34;,&#34;rh&#34;:82,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1008,&#34;wind_spd&#34;:2.55,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;west&#34;,&#34;slp&#34;:1015,&#34;datetime&#34;:&#34;2022-10-05:12&#34;,&#34;ts&#34;:1664971200,&#34;pop&#34;:0,&#34;ozone&#34;:291.8,&#34;dewpt&#34;:6.8,&#34;uv&#34;:1.6,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:275,&#34;timestamp_utc&#34;:&#34;2022-10-05T12:00:00&#34;,&#34;ghi&#34;:107.59,&#34;dhi&#34;:49.05,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01d&#34;,&#34;code&#34;:800},&#34;temp&#34;:9.8,&#34;vis&#34;:17.296,&#34;app_temp&#34;:9.8,&#34;solar_rad&#34;:107.59,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:5.96,&#34;timestamp_local&#34;:&#34;2022-10-05T08:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:853.5,&#34;wind_cdir&#34;:&#34;WNW&#34;,&#34;rh&#34;:71,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1008.5,&#34;wind_spd&#34;:3.34,&#34;clouds&#34;:100,&#34;wind_cdir_full&#34;:&#34;west-northwest&#34;,&#34;slp&#34;:1015.5,&#34;datetime&#34;:&#34;2022-10-05:15&#34;,&#34;ts&#34;:1664982000,&#34;pop&#34;:0,&#34;ozone&#34;:290.3,&#34;dewpt&#34;:10.5,&#34;uv&#34;:1.4,&#34;clouds_low&#34;:100,&#34;wind_dir&#34;:298,&#34;timestamp_utc&#34;:&#34;2022-10-05T15:00:00&#34;,&#34;ghi&#34;:652.51,&#34;dhi&#34;:106.58,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Overcast clouds&#34;,&#34;icon&#34;:&#34;c04d&#34;,&#34;code&#34;:804},&#34;temp&#34;:15.7,&#34;vis&#34;:23.792,&#34;app_temp&#34;:15.7,&#34;solar_rad&#34;:150.82191,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:6.34,&#34;timestamp_local&#34;:&#34;2022-10-05T11:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:886.46,&#34;wind_cdir&#34;:&#34;NW&#34;,&#34;rh&#34;:62,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1007,&#34;wind_spd&#34;:3.98,&#34;clouds&#34;:17,&#34;wind_cdir_full&#34;:&#34;northwest&#34;,&#34;slp&#34;:1014,&#34;datetime&#34;:&#34;2022-10-05:18&#34;,&#34;ts&#34;:1664992800,&#34;pop&#34;:0,&#34;ozone&#34;:291.3,&#34;dewpt&#34;:12.1,&#34;uv&#34;:5.2,&#34;clouds_low&#34;:17,&#34;wind_dir&#34;:324,&#34;timestamp_utc&#34;:&#34;2022-10-05T18:00:00&#34;,&#34;ghi&#34;:755.35,&#34;dhi&#34;:112.97,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Few clouds&#34;,&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:801},&#34;temp&#34;:19.6,&#34;vis&#34;:29.696,&#34;app_temp&#34;:19.2,&#34;solar_rad&#34;:728.1956,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:7.51,&#34;timestamp_local&#34;:&#34;2022-10-05T14:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:686.84,&#34;wind_cdir&#34;:&#34;NW&#34;,&#34;rh&#34;:61,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1007.5,&#34;wind_spd&#34;:2.9,&#34;clouds&#34;:17,&#34;wind_cdir_full&#34;:&#34;northwest&#34;,&#34;slp&#34;:1013.5,&#34;datetime&#34;:&#34;2022-10-05:21&#34;,&#34;ts&#34;:1665003600,&#34;pop&#34;:0,&#34;ozone&#34;:292.8,&#34;dewpt&#34;:13.2,&#34;uv&#34;:1.8,&#34;clouds_low&#34;:17,&#34;wind_dir&#34;:325,&#34;timestamp_utc&#34;:&#34;2022-10-05T21:00:00&#34;,&#34;ghi&#34;:318.53,&#34;dhi&#34;:79.26,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Few clouds&#34;,&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:801},&#34;temp&#34;:21,&#34;vis&#34;:29.296,&#34;app_temp&#34;:20.8,&#34;solar_rad&#34;:306.2661,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:7.03,&#34;timestamp_local&#34;:&#34;2022-10-05T17:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;NE&#34;,&#34;rh&#34;:76,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1008.5,&#34;wind_spd&#34;:1.89,&#34;clouds&#34;:29,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1015.5,&#34;datetime&#34;:&#34;2022-10-06:00&#34;,&#34;ts&#34;:1665014400,&#34;pop&#34;:0,&#34;ozone&#34;:295.5,&#34;dewpt&#34;:13,&#34;uv&#34;:0,&#34;clouds_low&#34;:29,&#34;wind_dir&#34;:34,&#34;timestamp_utc&#34;:&#34;2022-10-06T00:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Scattered clouds&#34;,&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:802},&#34;temp&#34;:17.3,&#34;vis&#34;:19.792,&#34;app_temp&#34;:17.3,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:3.38,&#34;timestamp_local&#34;:&#34;2022-10-05T20:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;NE&#34;,&#34;rh&#34;:87,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1009.5,&#34;wind_spd&#34;:1.51,&#34;clouds&#34;:27,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1016,&#34;datetime&#34;:&#34;2022-10-06:03&#34;,&#34;ts&#34;:1665025200,&#34;pop&#34;:0,&#34;ozone&#34;:295.3,&#34;dewpt&#34;:12.9,&#34;uv&#34;:0,&#34;clouds_low&#34;:27,&#34;wind_dir&#34;:34,&#34;timestamp_utc&#34;:&#34;2022-10-06T03:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Scattered clouds&#34;,&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:802},&#34;temp&#34;:15,&#34;vis&#34;:15,&#34;app_temp&#34;:15,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:4.74,&#34;timestamp_local&#34;:&#34;2022-10-05T23:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;WNW&#34;,&#34;rh&#34;:90,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1009.5,&#34;wind_spd&#34;:1.63,&#34;clouds&#34;:9,&#34;wind_cdir_full&#34;:&#34;west-northwest&#34;,&#34;slp&#34;:1016.5,&#34;datetime&#34;:&#34;2022-10-06:06&#34;,&#34;ts&#34;:1665036000,&#34;pop&#34;:0,&#34;ozone&#34;:296.5,&#34;dewpt&#34;:12,&#34;uv&#34;:0,&#34;clouds_low&#34;:9,&#34;wind_dir&#34;:282,&#34;timestamp_utc&#34;:&#34;2022-10-06T06:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Few clouds&#34;,&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:801},&#34;temp&#34;:13.6,&#34;vis&#34;:13.096,&#34;app_temp&#34;:13.6,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:1.67,&#34;timestamp_local&#34;:&#34;2022-10-06T02:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;W&#34;,&#34;rh&#34;:93,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1010,&#34;wind_spd&#34;:1.71,&#34;clouds&#34;:22,&#34;wind_cdir_full&#34;:&#34;west&#34;,&#34;slp&#34;:1017,&#34;datetime&#34;:&#34;2022-10-06:09&#34;,&#34;ts&#34;:1665046800,&#34;pop&#34;:0,&#34;ozone&#34;:300.3,&#34;dewpt&#34;:11.3,&#34;uv&#34;:0,&#34;clouds_low&#34;:12,&#34;wind_dir&#34;:274,&#34;timestamp_utc&#34;:&#34;2022-10-06T09:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Scattered clouds&#34;,&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:802},&#34;temp&#34;:12.4,&#34;vis&#34;:12.2,&#34;app_temp&#34;:12.4,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:2.41,&#34;timestamp_local&#34;:&#34;2022-10-06T05:00:00&#34;,&#34;clouds_hi&#34;:86,&#34;snow_depth&#34;:0},{&#34;dni&#34;:434.85,&#34;wind_cdir&#34;:&#34;W&#34;,&#34;rh&#34;:96,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1011.5,&#34;wind_spd&#34;:1.44,&#34;clouds&#34;:25,&#34;wind_cdir_full&#34;:&#34;west&#34;,&#34;slp&#34;:1018,&#34;datetime&#34;:&#34;2022-10-06:12&#34;,&#34;ts&#34;:1665057600,&#34;pop&#34;:0,&#34;ozone&#34;:301,&#34;dewpt&#34;:11.8,&#34;uv&#34;:1.3,&#34;clouds_low&#34;:15,&#34;wind_dir&#34;:270,&#34;timestamp_utc&#34;:&#34;2022-10-06T12:00:00&#34;,&#34;ghi&#34;:104.89,&#34;dhi&#34;:48.5,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Scattered clouds&#34;,&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:802},&#34;temp&#34;:12.4,&#34;vis&#34;:12.2,&#34;app_temp&#34;:12.4,&#34;solar_rad&#34;:100.485085,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:2.33,&#34;timestamp_local&#34;:&#34;2022-10-06T08:00:00&#34;,&#34;clouds_hi&#34;:100,&#34;snow_depth&#34;:0},{&#34;dni&#34;:852.42,&#34;wind_cdir&#34;:&#34;WSW&#34;,&#34;rh&#34;:58,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1011,&#34;wind_spd&#34;:0.67,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;west-southwest&#34;,&#34;slp&#34;:1018.5,&#34;datetime&#34;:&#34;2022-10-06:15&#34;,&#34;ts&#34;:1665068400,&#34;pop&#34;:0,&#34;ozone&#34;:300.3,&#34;dewpt&#34;:12.8,&#34;uv&#34;:4.5,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:250,&#34;timestamp_utc&#34;:&#34;2022-10-06T15:00:00&#34;,&#34;ghi&#34;:648.36,&#34;dhi&#34;:106.35,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01d&#34;,&#34;code&#34;:800},&#34;temp&#34;:21.4,&#34;vis&#34;:24.096,&#34;app_temp&#34;:21.1,&#34;solar_rad&#34;:625.5268,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:2.3,&#34;timestamp_local&#34;:&#34;2022-10-06T11:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:885.31,&#34;wind_cdir&#34;:&#34;WSW&#34;,&#34;rh&#34;:57,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1009.5,&#34;wind_spd&#34;:2.41,&#34;clouds&#34;:3,&#34;wind_cdir_full&#34;:&#34;west-southwest&#34;,&#34;slp&#34;:1017,&#34;datetime&#34;:&#34;2022-10-06:18&#34;,&#34;ts&#34;:1665079200,&#34;pop&#34;:0,&#34;ozone&#34;:295.5,&#34;dewpt&#34;:14.6,&#34;uv&#34;:5.7,&#34;clouds_low&#34;:3,&#34;wind_dir&#34;:258,&#34;timestamp_utc&#34;:&#34;2022-10-06T18:00:00&#34;,&#34;ghi&#34;:750.18,&#34;dhi&#34;:112.7,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Few clouds&#34;,&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:801},&#34;temp&#34;:23.6,&#34;vis&#34;:24.096,&#34;app_temp&#34;:23.5,&#34;solar_rad&#34;:720.40924,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:3,&#34;timestamp_local&#34;:&#34;2022-10-06T14:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:683.15,&#34;wind_cdir&#34;:&#34;SW&#34;,&#34;rh&#34;:58,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1008.5,&#34;wind_spd&#34;:2.62,&#34;clouds&#34;:52,&#34;wind_cdir_full&#34;:&#34;southwest&#34;,&#34;slp&#34;:1016,&#34;datetime&#34;:&#34;2022-10-06:21&#34;,&#34;ts&#34;:1665090000,&#34;pop&#34;:0,&#34;ozone&#34;:295.8,&#34;dewpt&#34;:14.9,&#34;uv&#34;:1.3,&#34;clouds_low&#34;:52,&#34;wind_dir&#34;:233,&#34;timestamp_utc&#34;:&#34;2022-10-06T21:00:00&#34;,&#34;ghi&#34;:313.22,&#34;dhi&#34;:78.72,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Broken clouds&#34;,&#34;icon&#34;:&#34;c03d&#34;,&#34;code&#34;:803},&#34;temp&#34;:23.7,&#34;vis&#34;:24.096,&#34;app_temp&#34;:23.6,&#34;solar_rad&#34;:269.93402,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:3.2,&#34;timestamp_local&#34;:&#34;2022-10-06T17:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;SSE&#34;,&#34;rh&#34;:68,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1009.5,&#34;wind_spd&#34;:1.92,&#34;clouds&#34;:6,&#34;wind_cdir_full&#34;:&#34;south-southeast&#34;,&#34;slp&#34;:1017,&#34;datetime&#34;:&#34;2022-10-07:00&#34;,&#34;ts&#34;:1665100800,&#34;pop&#34;:0,&#34;ozone&#34;:294,&#34;dewpt&#34;:14.9,&#34;uv&#34;:0,&#34;clouds_low&#34;:6,&#34;wind_dir&#34;:167,&#34;timestamp_utc&#34;:&#34;2022-10-07T00:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Few clouds&#34;,&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:801},&#34;temp&#34;:21,&#34;vis&#34;:24.096,&#34;app_temp&#34;:21,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:2.2,&#34;timestamp_local&#34;:&#34;2022-10-06T20:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;SW&#34;,&#34;rh&#34;:61,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1009.5,&#34;wind_spd&#34;:2.64,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;southwest&#34;,&#34;slp&#34;:1017.5,&#34;datetime&#34;:&#34;2022-10-07:03&#34;,&#34;ts&#34;:1665111600,&#34;pop&#34;:0,&#34;ozone&#34;:296,&#34;dewpt&#34;:9.7,&#34;uv&#34;:0,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:233,&#34;timestamp_utc&#34;:&#34;2022-10-07T03:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01n&#34;,&#34;code&#34;:800},&#34;temp&#34;:17.3,&#34;vis&#34;:24.128,&#34;app_temp&#34;:17.3,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:2.61,&#34;timestamp_local&#34;:&#34;2022-10-06T23:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;WSW&#34;,&#34;rh&#34;:66,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1009.5,&#34;wind_spd&#34;:2.81,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;west-southwest&#34;,&#34;slp&#34;:1017.5,&#34;datetime&#34;:&#34;2022-10-07:06&#34;,&#34;ts&#34;:1665122400,&#34;pop&#34;:0,&#34;ozone&#34;:300.3,&#34;dewpt&#34;:9.4,&#34;uv&#34;:0,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:252,&#34;timestamp_utc&#34;:&#34;2022-10-07T06:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01n&#34;,&#34;code&#34;:800},&#34;temp&#34;:15.8,&#34;vis&#34;:24.128,&#34;app_temp&#34;:15.8,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:4.6,&#34;timestamp_local&#34;:&#34;2022-10-07T02:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;WSW&#34;,&#34;rh&#34;:69,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1010,&#34;wind_spd&#34;:2.87,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;west-southwest&#34;,&#34;slp&#34;:1018,&#34;datetime&#34;:&#34;2022-10-07:09&#34;,&#34;ts&#34;:1665133200,&#34;pop&#34;:0,&#34;ozone&#34;:298.3,&#34;dewpt&#34;:8.8,&#34;uv&#34;:0,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:246,&#34;timestamp_utc&#34;:&#34;2022-10-07T09:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01n&#34;,&#34;code&#34;:800},&#34;temp&#34;:14.4,&#34;vis&#34;:24.128,&#34;app_temp&#34;:14.4,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:4.5,&#34;timestamp_local&#34;:&#34;2022-10-07T05:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:429.47,&#34;wind_cdir&#34;:&#34;WSW&#34;,&#34;rh&#34;:67,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1010.5,&#34;wind_spd&#34;:2.87,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;west-southwest&#34;,&#34;slp&#34;:1019,&#34;datetime&#34;:&#34;2022-10-07:12&#34;,&#34;ts&#34;:1665144000,&#34;pop&#34;:0,&#34;ozone&#34;:295.5,&#34;dewpt&#34;:8.6,&#34;uv&#34;:1.6,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:249,&#34;timestamp_utc&#34;:&#34;2022-10-07T12:00:00&#34;,&#34;ghi&#34;:102.19,&#34;dhi&#34;:47.94,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01d&#34;,&#34;code&#34;:800},&#34;temp&#34;:14.7,&#34;vis&#34;:24.128,&#34;app_temp&#34;:14.7,&#34;solar_rad&#34;:102.19,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:6.2,&#34;timestamp_local&#34;:&#34;2022-10-07T08:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:851.32,&#34;wind_cdir&#34;:&#34;WSW&#34;,&#34;rh&#34;:44,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1010.5,&#34;wind_spd&#34;:4.27,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;west-southwest&#34;,&#34;slp&#34;:1018.5,&#34;datetime&#34;:&#34;2022-10-07:15&#34;,&#34;ts&#34;:1665154800,&#34;pop&#34;:0,&#34;ozone&#34;:293.3,&#34;dewpt&#34;:9.8,&#34;uv&#34;:4.5,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:240,&#34;timestamp_utc&#34;:&#34;2022-10-07T15:00:00&#34;,&#34;ghi&#34;:644.19,&#34;dhi&#34;:106.11,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01d&#34;,&#34;code&#34;:800},&#34;temp&#34;:22.7,&#34;vis&#34;:24.128,&#34;app_temp&#34;:22.2,&#34;solar_rad&#34;:644.19,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:6.31,&#34;timestamp_local&#34;:&#34;2022-10-07T11:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:884.15,&#34;wind_cdir&#34;:&#34;WSW&#34;,&#34;rh&#34;:36,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1008.5,&#34;wind_spd&#34;:4.77,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;west-southwest&#34;,&#34;slp&#34;:1016.5,&#34;datetime&#34;:&#34;2022-10-07:18&#34;,&#34;ts&#34;:1665165600,&#34;pop&#34;:0,&#34;ozone&#34;:292,&#34;dewpt&#34;:10.6,&#34;uv&#34;:5.7,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:244,&#34;timestamp_utc&#34;:&#34;2022-10-07T18:00:00&#34;,&#34;ghi&#34;:744.99,&#34;dhi&#34;:112.43,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01d&#34;,&#34;code&#34;:800},&#34;temp&#34;:26.9,&#34;vis&#34;:24.128,&#34;app_temp&#34;:26.6,&#34;solar_rad&#34;:744.99,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:6.2,&#34;timestamp_local&#34;:&#34;2022-10-07T14:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:679.4,&#34;wind_cdir&#34;:&#34;WSW&#34;,&#34;rh&#34;:37,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1007.5,&#34;wind_spd&#34;:3.41,&#34;clouds&#34;:14,&#34;wind_cdir_full&#34;:&#34;west-southwest&#34;,&#34;slp&#34;:1015.5,&#34;datetime&#34;:&#34;2022-10-07:21&#34;,&#34;ts&#34;:1665176400,&#34;pop&#34;:0,&#34;ozone&#34;:289.5,&#34;dewpt&#34;:10.9,&#34;uv&#34;:1.9,&#34;clouds_low&#34;:14,&#34;wind_dir&#34;:251,&#34;timestamp_utc&#34;:&#34;2022-10-07T21:00:00&#34;,&#34;ghi&#34;:307.93,&#34;dhi&#34;:78.17,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Few clouds&#34;,&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:801},&#34;temp&#34;:26.8,&#34;vis&#34;:24.128,&#34;app_temp&#34;:26.6,&#34;solar_rad&#34;:298.17807,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:5.7,&#34;timestamp_local&#34;:&#34;2022-10-07T17:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;SSW&#34;,&#34;rh&#34;:52,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1008.5,&#34;wind_spd&#34;:3.17,&#34;clouds&#34;:11,&#34;wind_cdir_full&#34;:&#34;south-southwest&#34;,&#34;slp&#34;:1016.5,&#34;datetime&#34;:&#34;2022-10-08:00&#34;,&#34;ts&#34;:1665187200,&#34;pop&#34;:0,&#34;ozone&#34;:288.3,&#34;dewpt&#34;:10.4,&#34;uv&#34;:0,&#34;clouds_low&#34;:8,&#34;wind_dir&#34;:210,&#34;timestamp_utc&#34;:&#34;2022-10-08T00:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Few clouds&#34;,&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:801},&#34;temp&#34;:20.6,&#34;vis&#34;:24.128,&#34;app_temp&#34;:20,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:4.7,&#34;timestamp_local&#34;:&#34;2022-10-07T20:00:00&#34;,&#34;clouds_hi&#34;:46,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;NNW&#34;,&#34;rh&#34;:55,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1010,&#34;wind_spd&#34;:3.68,&#34;clouds&#34;:63,&#34;wind_cdir_full&#34;:&#34;north-northwest&#34;,&#34;slp&#34;:1018,&#34;datetime&#34;:&#34;2022-10-08:03&#34;,&#34;ts&#34;:1665198000,&#34;pop&#34;:0,&#34;ozone&#34;:288,&#34;dewpt&#34;:10.6,&#34;uv&#34;:0,&#34;clouds_low&#34;:63,&#34;wind_dir&#34;:340,&#34;timestamp_utc&#34;:&#34;2022-10-08T03:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Broken clouds&#34;,&#34;icon&#34;:&#34;c03n&#34;,&#34;code&#34;:803},&#34;temp&#34;:19.9,&#34;vis&#34;:24.128,&#34;app_temp&#34;:19.4,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:10.01,&#34;timestamp_local&#34;:&#34;2022-10-07T23:00:00&#34;,&#34;clouds_hi&#34;:19,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;NNE&#34;,&#34;rh&#34;:62,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1012.5,&#34;wind_spd&#34;:4.73,&#34;clouds&#34;:93,&#34;wind_cdir_full&#34;:&#34;north-northeast&#34;,&#34;slp&#34;:1020.5,&#34;datetime&#34;:&#34;2022-10-08:06&#34;,&#34;ts&#34;:1665208800,&#34;pop&#34;:0,&#34;ozone&#34;:286.5,&#34;dewpt&#34;:10.6,&#34;uv&#34;:0,&#34;clouds_low&#34;:93,&#34;wind_dir&#34;:19,&#34;timestamp_utc&#34;:&#34;2022-10-08T06:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Overcast clouds&#34;,&#34;icon&#34;:&#34;c04n&#34;,&#34;code&#34;:804},&#34;temp&#34;:17.9,&#34;vis&#34;:24.128,&#34;app_temp&#34;:17.9,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:8.32,&#34;timestamp_local&#34;:&#34;2022-10-08T02:00:00&#34;,&#34;clouds_hi&#34;:100,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;NNE&#34;,&#34;rh&#34;:68,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1014,&#34;wind_spd&#34;:5.37,&#34;clouds&#34;:25,&#34;wind_cdir_full&#34;:&#34;north-northeast&#34;,&#34;slp&#34;:1022.5,&#34;datetime&#34;:&#34;2022-10-08:09&#34;,&#34;ts&#34;:1665219600,&#34;pop&#34;:0,&#34;ozone&#34;:285.3,&#34;dewpt&#34;:8.1,&#34;uv&#34;:0,&#34;clouds_low&#34;:25,&#34;wind_dir&#34;:30,&#34;timestamp_utc&#34;:&#34;2022-10-08T09:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Scattered clouds&#34;,&#34;icon&#34;:&#34;c02n&#34;,&#34;code&#34;:802},&#34;temp&#34;:13.9,&#34;vis&#34;:24.128,&#34;app_temp&#34;:13.9,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:9.6,&#34;timestamp_local&#34;:&#34;2022-10-08T05:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:423.95,&#34;wind_cdir&#34;:&#34;NE&#34;,&#34;rh&#34;:66,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1016,&#34;wind_spd&#34;:4.64,&#34;clouds&#34;:1,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1024,&#34;datetime&#34;:&#34;2022-10-08:12&#34;,&#34;ts&#34;:1665230400,&#34;pop&#34;:0,&#34;ozone&#34;:285.8,&#34;dewpt&#34;:5.5,&#34;uv&#34;:1.6,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:36,&#34;timestamp_utc&#34;:&#34;2022-10-08T12:00:00&#34;,&#34;ghi&#34;:99.48,&#34;dhi&#34;:47.37,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01d&#34;,&#34;code&#34;:800},&#34;temp&#34;:11.7,&#34;vis&#34;:24.128,&#34;app_temp&#34;:11.7,&#34;solar_rad&#34;:99.48,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:9.61,&#34;timestamp_local&#34;:&#34;2022-10-08T08:00:00&#34;,&#34;clouds_hi&#34;:2,&#34;snow_depth&#34;:0},{&#34;dni&#34;:850.19,&#34;wind_cdir&#34;:&#34;NE&#34;,&#34;rh&#34;:46,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1017,&#34;wind_spd&#34;:4.5,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1025,&#34;datetime&#34;:&#34;2022-10-08:15&#34;,&#34;ts&#34;:1665241200,&#34;pop&#34;:0,&#34;ozone&#34;:285.3,&#34;dewpt&#34;:3.9,&#34;uv&#34;:4.5,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:41,&#34;timestamp_utc&#34;:&#34;2022-10-08T15:00:00&#34;,&#34;ghi&#34;:639.97,&#34;dhi&#34;:105.87,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01d&#34;,&#34;code&#34;:800},&#34;temp&#34;:15.4,&#34;vis&#34;:24.128,&#34;app_temp&#34;:15.4,&#34;solar_rad&#34;:639.97,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:5.11,&#34;timestamp_local&#34;:&#34;2022-10-08T11:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:882.97,&#34;wind_cdir&#34;:&#34;NE&#34;,&#34;rh&#34;:40,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1015,&#34;wind_spd&#34;:3.09,&#34;clouds&#34;:25,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1023,&#34;datetime&#34;:&#34;2022-10-08:18&#34;,&#34;ts&#34;:1665252000,&#34;pop&#34;:0,&#34;ozone&#34;:285.3,&#34;dewpt&#34;:5.2,&#34;uv&#34;:4.7,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:36,&#34;timestamp_utc&#34;:&#34;2022-10-08T18:00:00&#34;,&#34;ghi&#34;:739.78,&#34;dhi&#34;:112.16,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Scattered clouds&#34;,&#34;icon&#34;:&#34;c02d&#34;,&#34;code&#34;:802},&#34;temp&#34;:19.1,&#34;vis&#34;:24.128,&#34;app_temp&#34;:18.1,&#34;solar_rad&#34;:733.805,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:2.95,&#34;timestamp_local&#34;:&#34;2022-10-08T14:00:00&#34;,&#34;clouds_hi&#34;:100,&#34;snow_depth&#34;:0},{&#34;dni&#34;:675.61,&#34;wind_cdir&#34;:&#34;NE&#34;,&#34;rh&#34;:40,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1013.5,&#34;wind_spd&#34;:1.76,&#34;clouds&#34;:1,&#34;wind_cdir_full&#34;:&#34;northeast&#34;,&#34;slp&#34;:1021.5,&#34;datetime&#34;:&#34;2022-10-08:21&#34;,&#34;ts&#34;:1665262800,&#34;pop&#34;:0,&#34;ozone&#34;:284.8,&#34;dewpt&#34;:5.4,&#34;uv&#34;:2,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:49,&#34;timestamp_utc&#34;:&#34;2022-10-08T21:00:00&#34;,&#34;ghi&#34;:302.66,&#34;dhi&#34;:77.63,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01d&#34;,&#34;code&#34;:800},&#34;temp&#34;:19.3,&#34;vis&#34;:24.128,&#34;app_temp&#34;:18.3,&#34;solar_rad&#34;:302.66,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:1.8,&#34;timestamp_local&#34;:&#34;2022-10-08T17:00:00&#34;,&#34;clouds_hi&#34;:2,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;ESE&#34;,&#34;rh&#34;:57,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1014.5,&#34;wind_spd&#34;:2.54,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;east-southeast&#34;,&#34;slp&#34;:1022.5,&#34;datetime&#34;:&#34;2022-10-09:00&#34;,&#34;ts&#34;:1665273600,&#34;pop&#34;:0,&#34;ozone&#34;:288,&#34;dewpt&#34;:5.7,&#34;uv&#34;:0,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:118,&#34;timestamp_utc&#34;:&#34;2022-10-09T00:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01n&#34;,&#34;code&#34;:800},&#34;temp&#34;:14.1,&#34;vis&#34;:24.128,&#34;app_temp&#34;:14.1,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:2.9,&#34;timestamp_local&#34;:&#34;2022-10-08T20:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;ESE&#34;,&#34;rh&#34;:64,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1015.5,&#34;wind_spd&#34;:1.54,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;east-southeast&#34;,&#34;slp&#34;:1023.5,&#34;datetime&#34;:&#34;2022-10-09:03&#34;,&#34;ts&#34;:1665284400,&#34;pop&#34;:0,&#34;ozone&#34;:289,&#34;dewpt&#34;:5.4,&#34;uv&#34;:0,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:104,&#34;timestamp_utc&#34;:&#34;2022-10-09T03:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01n&#34;,&#34;code&#34;:800},&#34;temp&#34;:12,&#34;vis&#34;:24.128,&#34;app_temp&#34;:12,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:1.61,&#34;timestamp_local&#34;:&#34;2022-10-08T23:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;ESE&#34;,&#34;rh&#34;:67,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1015.5,&#34;wind_spd&#34;:1.78,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;east-southeast&#34;,&#34;slp&#34;:1023.5,&#34;datetime&#34;:&#34;2022-10-09:06&#34;,&#34;ts&#34;:1665295200,&#34;pop&#34;:0,&#34;ozone&#34;:286.8,&#34;dewpt&#34;:5,&#34;uv&#34;:0,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:115,&#34;timestamp_utc&#34;:&#34;2022-10-09T06:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01n&#34;,&#34;code&#34;:800},&#34;temp&#34;:10.9,&#34;vis&#34;:24.128,&#34;app_temp&#34;:10.9,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:1.82,&#34;timestamp_local&#34;:&#34;2022-10-09T02:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:0,&#34;wind_cdir&#34;:&#34;ENE&#34;,&#34;rh&#34;:72,&#34;pod&#34;:&#34;n&#34;,&#34;pres&#34;:1015.5,&#34;wind_spd&#34;:0.88,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;east-northeast&#34;,&#34;slp&#34;:1023.5,&#34;datetime&#34;:&#34;2022-10-09:09&#34;,&#34;ts&#34;:1665306000,&#34;pop&#34;:0,&#34;ozone&#34;:287.3,&#34;dewpt&#34;:4.8,&#34;uv&#34;:0,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:72,&#34;timestamp_utc&#34;:&#34;2022-10-09T09:00:00&#34;,&#34;ghi&#34;:0,&#34;dhi&#34;:0,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01n&#34;,&#34;code&#34;:800},&#34;temp&#34;:9.6,&#34;vis&#34;:24.128,&#34;app_temp&#34;:9.6,&#34;solar_rad&#34;:0,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:0.91,&#34;timestamp_local&#34;:&#34;2022-10-09T05:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:418.3,&#34;wind_cdir&#34;:&#34;NNE&#34;,&#34;rh&#34;:72,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1016,&#34;wind_spd&#34;:1.16,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;north-northeast&#34;,&#34;slp&#34;:1024,&#34;datetime&#34;:&#34;2022-10-09:12&#34;,&#34;ts&#34;:1665316800,&#34;pop&#34;:0,&#34;ozone&#34;:286.5,&#34;dewpt&#34;:5.6,&#34;uv&#34;:1.6,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:16,&#34;timestamp_utc&#34;:&#34;2022-10-09T12:00:00&#34;,&#34;ghi&#34;:96.76,&#34;dhi&#34;:46.78,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01d&#34;,&#34;code&#34;:800},&#34;temp&#34;:10.4,&#34;vis&#34;:24.128,&#34;app_temp&#34;:10.4,&#34;solar_rad&#34;:96.76,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:1.11,&#34;timestamp_local&#34;:&#34;2022-10-09T08:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0},{&#34;dni&#34;:849.04,&#34;wind_cdir&#34;:&#34;NNE&#34;,&#34;rh&#34;:47,&#34;pod&#34;:&#34;d&#34;,&#34;pres&#34;:1016,&#34;wind_spd&#34;:0.11,&#34;clouds&#34;:0,&#34;wind_cdir_full&#34;:&#34;north-northeast&#34;,&#34;slp&#34;:1024,&#34;datetime&#34;:&#34;2022-10-09:15&#34;,&#34;ts&#34;:1665327600,&#34;pop&#34;:0,&#34;ozone&#34;:287.3,&#34;dewpt&#34;:6.8,&#34;uv&#34;:4.4,&#34;clouds_low&#34;:0,&#34;wind_dir&#34;:20,&#34;timestamp_utc&#34;:&#34;2022-10-09T15:00:00&#34;,&#34;ghi&#34;:635.72,&#34;dhi&#34;:105.63,&#34;precip&#34;:0,&#34;weather&#34;:{&#34;description&#34;:&#34;Clear Sky&#34;,&#34;icon&#34;:&#34;c01d&#34;,&#34;code&#34;:800},&#34;temp&#34;:18.3,&#34;vis&#34;:24.128,&#34;app_temp&#34;:17.5,&#34;solar_rad&#34;:635.72,&#34;clouds_mid&#34;:0,&#34;snow&#34;:0,&#34;wind_gust_spd&#34;:0.22,&#34;timestamp_local&#34;:&#34;2022-10-09T11:00:00&#34;,&#34;clouds_hi&#34;:0,&#34;snow_depth&#34;:0}],&#34;state_code&#34;:&#34;NC&#34;,&#34;city_name&#34;:&#34;Four Oaks&#34;} .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/10/01/api.html",
            "relUrl": "/jupyter/2022/10/01/api.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Fibonacci",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); FiboFor fibofor = new FiboFor(); fibofor.print(); FiboWhile fibowhile = new FiboWhile(); fibowhile.print(); FiboRecur fiborecur = new FiboRecur(); fiborecur.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method = For Loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method = While Loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Init method = Recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . For Loop . public class FiboFor extends Fibo{ // Overriding the init method so that a different method can be used @Override public void init() { this.name = &quot;For Loop&quot;; // jurt prints out first 2 int n1 = 1; int n2 = 1; this.setData(0); this.setData(n1); this.setData(n2); int loopSize = this.size - 2; // for loop // adds numbers together, witha temp variable for(int i = 0;i&lt;loopSize;i++) { int n3 = n2; n2 = n2 + n1; n1 = n3; this.setData(n2); } } } . While Loop . public class FiboWhile extends Fibo{ // Overriding the init method so that a different method can be used @Override public void init() { this.name = &quot;While Loop&quot;; // jurt prints out first 2 int n1 = 1; int n2 = 1; this.setData(0); this.setData(n1); this.setData(n2); int loopSize = this.size - 2; //while loop // adds numbers together, witha temp variable int i = 0; while(i &lt; loopSize) { int n3 = n2; n2 = n2 + n1; n1 = n3; this.setData(n2); i++; } } } . Recursion . public class FiboRecur extends Fibo{ // Overriding the init method so that a different method can be used @Override public void init() { this.name = &quot;Recursion&quot;; // Iterating to show the entire sequence for (int i=0; i&lt;this.size; i++){ this.setData(Recur(i)); } } // Recursion public int Recur(int size) { // term is sum of 2 numbesr if (size &gt; 2) { // recursively calling itself return (Recur(size-1) + Recur(size-2)); } //cases else if (size == 2) { return 1; } else if (size == 1) { return 1; } else { return 0; } } } . Blog with findings . This assignment does use for, while, and recursion in this. There are multiple variations of the same code, which uses for loops, while loops, and recursion. All 3 have the same exact result, with it printing out the count, and the line that prints out the result is always print(n3 + &quot; &quot;). . The Recursive loop is executing itself as it goes on, whereas the iterative loops execute a set code. .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/09/25/fibonacci.html",
            "relUrl": "/jupyter/2022/09/25/fibonacci.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "APCSA previous FRQ1",
            "content": "FRQ . Q1 focuses on methods and control structures. Here is the solution. . part a. complete method eimulaet below. you must use hopDistance appropriately . /* simluates a frog attempting to reach the goal as described in part a . returns true if frog successfully reached or passed the goal during the simluation false otherwise */ . //the first 2 lines were given public boolean simluate() { int pos = 0; for (int count = 0; count &lt; maxHops; count++) { pos += hopDistance(); if (pos &gt;= goal) { return true; } else if (pos &lt; 0) { return false; } } return false; } . part b. . write the runSimluations method, which performs a given number of simluations and returns the proportion of simluations in which the frog successfully reached or passed the goal. For example, if the parameter passed to runSimluations is 400, and 100 of the 400 simluate method calls returned true, then the runSimluations method should return 0.25 . complete method runSimulations below. assume that simluate works as specified, regardless of what you wrote in part a. you must use simluate appropriately to recieve full credit . /* runs num simluations and returns the proportion of simluations in which the frog successfully reached or passed the goal * precondition: num &gt; 0 */ //first 2 lines given public double runSimulations(int num) { int succ = 0; for (int i = 0; i &lt; num; i++) { if(simluate()) { succ++; } } return (double)succ / num; } . I think that when actually doing it on paper is going to be harder, because you cant really test for solutions. I think that its going to be hard, especially because I am not particularly good at remembering syntax. I think that with more practice, I should be better at solving these solutions. .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/09/18/FRQ1.html",
            "relUrl": "/jupyter/2022/09/18/FRQ1.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Monkey Iteration",
            "content": "class CatLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] cats; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public CatLoop() { //Storing Data in 2D arrays cats = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //cat 0 { &quot; ∧＿∧&quot;, &quot; (,,´∀｀）　&quot;, &quot; ⊂　 つ&quot;, &quot; | ⍝ |/&quot;, &quot; (__)&quot; //[0][3] legs }, //cat 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //cat 2 { &quot; (,,´∀｀）&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //cat 3 { &quot; ʕ•́ᴥ•̀ʔ &quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; == == &quot;, &quot; _/⍵ _ &quot; }, //cat 4 { &quot; ∧＿∧&quot;, &quot; (,,´⍝｀）　&quot;, &quot; ⊂　 つ&quot;, &quot; | |/&quot;, &quot; (__)&quot; }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;gato amigo poem&quot;); // monkeys (non-primitive) defined in constructor knows its length int catCount = cats.length; for (int i = catCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(&quot;one hit a rock and now hes gone&quot;); System.out.println(i + &quot; little cats rolling down a hill&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; catCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; cats[row].length; col++) { // prints specific part of the monkey from the column System.out.print(cats[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing catCount variable by 1 catCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;This little cat won the race!!&quot;); System.out.println(&quot;&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new CatLoop().printPoem(); //a new monkey list and output in one step } } CatLoop.main(null); . gato amigo poem one hit a rock and now hes gone 5 little cats rolling down a hill ∧＿∧ (,,´∀｀）　 ⊂　 つ | ⍝ |/ (__) ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ (,,´∀｀） _⎐_/ &lt;-2-&gt; 〈 〉 ʕ•́ᴥ•̀ʔ _⍾_/ == == _/⍵ _ ∧＿∧ (,,´⍝｀）　 ⊂　 つ | |/ (__) one hit a rock and now hes gone 4 little cats rolling down a hill ∧＿∧ (,,´∀｀）　 ⊂　 つ | ⍝ |/ (__) ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ (,,´∀｀） _⎐_/ &lt;-2-&gt; 〈 〉 ʕ•́ᴥ•̀ʔ _⍾_/ == == _/⍵ _ one hit a rock and now hes gone 3 little cats rolling down a hill ∧＿∧ (,,´∀｀）　 ⊂　 つ | ⍝ |/ (__) ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ (,,´∀｀） _⎐_/ &lt;-2-&gt; 〈 〉 one hit a rock and now hes gone 2 little cats rolling down a hill ∧＿∧ (,,´∀｀）　 ⊂　 つ | ⍝ |/ (__) ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ one hit a rock and now hes gone 1 little cats rolling down a hill ∧＿∧ (,,´∀｀）　 ⊂　 つ | ⍝ |/ (__) This little cat won the race!! THE END . class CatLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] cats; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public CatLoop() { //Storing Data in 2D arrays cats = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot; ∧＿∧&quot;, &quot; (,,´∀｀)&quot;, &quot;⊂　 つ&quot;, &quot; | ⍝ |/&quot;, &quot; (__)&quot; //[0][3] legs }, //cat { &quot;ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/&quot;, &quot; ++1++&quot;, &quot; ⌋ ⌊&quot; }, //cat 2 { &quot;(,,´∀｀)&quot;, //[2][0] &quot; _⎐_/&quot;, &quot;&lt;-2-&gt;&quot;, &quot;〈 〉&quot; }, //cat 3 { &quot; ʕ•́ᴥ•̀ʔ&quot;, //[3][0] &quot; _⍾_/&quot;, &quot;== ==&quot;, &quot;_/⍵ _&quot; }, //cat 4 { &quot; ∧＿∧&quot;, &quot; (,,´⍝｀）&quot;, &quot;⊂　 つ&quot;, &quot; | |/&quot;, &quot; (__)&quot; }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoemHorizontal() { int catCount = cats.length; for (int i = catCount; i &gt; 0; i--) { System.out.println(&quot;one hit a rock and now hes gone&quot;); System.out.println(i + &quot; little cats rolling down a hill&quot;); for (int col = 0; col &lt; cats[1].length; col++) { for (int row = 0; row &lt; i; row++) { System.out.print(cats[row][col] + &quot; t t&quot;); } System.out.println(); } } System.out.println(&quot;This little cat won the race!!&quot;); System.out.println(&quot;&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new CatLoop().printPoemHorizontal(); //a new monkey list and output in one step } } CatLoop.main(null); . one hit a rock and now hes gone 5 little cats rolling down a hill ∧＿∧ ʕ༼ ◕_◕ ༽ʔ (,,´∀｀) ʕ•́ᴥ•̀ʔ ∧＿∧ (,,´∀｀) _⎏_/ _⎐_/ _⍾_/ (,,´⍝｀） ⊂　 つ ++1++ &lt;-2-&gt; == == ⊂　 つ | ⍝ |/ ⌋ ⌊ 〈 〉 _/⍵ _ | |/ one hit a rock and now hes gone 4 little cats rolling down a hill ∧＿∧ ʕ༼ ◕_◕ ༽ʔ (,,´∀｀) ʕ•́ᴥ•̀ʔ (,,´∀｀) _⎏_/ _⎐_/ _⍾_/ ⊂　 つ ++1++ &lt;-2-&gt; == == | ⍝ |/ ⌋ ⌊ 〈 〉 _/⍵ _ one hit a rock and now hes gone 3 little cats rolling down a hill ∧＿∧ ʕ༼ ◕_◕ ༽ʔ (,,´∀｀) (,,´∀｀) _⎏_/ _⎐_/ ⊂　 つ ++1++ &lt;-2-&gt; | ⍝ |/ ⌋ ⌊ 〈 〉 one hit a rock and now hes gone 2 little cats rolling down a hill ∧＿∧ ʕ༼ ◕_◕ ༽ʔ (,,´∀｀) _⎏_/ ⊂　 つ ++1++ | ⍝ |/ ⌋ ⌊ one hit a rock and now hes gone 1 little cats rolling down a hill ∧＿∧ (,,´∀｀) ⊂　 つ | ⍝ |/ This little cat won the race!! THE END . // backwards class CatLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] cats; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public CatLoop() { //Storing Data in 2D arrays cats = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //cat 0 { &quot; ∧＿∧&quot;, &quot; (,,´∀｀）　&quot;, &quot; ⊂　 つ&quot;, &quot; | ⍝ |/&quot;, &quot; (__)&quot; //[0][3] legs }, //cat 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //cat 2 { &quot; (,,´∀｀）&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //cat 3 { &quot; ʕ•́ᴥ•̀ʔ &quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; == == &quot;, &quot; _/⍵ _ &quot; }, //cat 4 { &quot; ∧＿∧&quot;, &quot; (,,´⍝｀）　&quot;, &quot; ⊂　 つ&quot;, &quot; | |/&quot;, &quot; (__)&quot; }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;gato amigo poem&quot;); // monkeys (non-primitive) defined in constructor knows its length int catCount = cats.length; for (int i = 1; i &lt;= catCount; i++) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(&quot;a fren came up&quot;); System.out.println(i + &quot; little cats walking up a hill&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; i; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; cats[row].length; col++) { // prints specific part of the monkey from the column System.out.print(cats[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing catCount variable by 1 } //out of all the loops, prints finishing messages System.out.println(&quot;Now they are ready to race!!&quot;); System.out.println(&quot;&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new CatLoop().printPoem(); //a new monkey list and output in one step } } CatLoop.main(null); . gato amigo poem a fren came up 1 little cats walking up a hill ∧＿∧ (,,´∀｀）　 ⊂　 つ | ⍝ |/ (__) a fren came up 2 little cats walking up a hill ∧＿∧ (,,´∀｀）　 ⊂　 つ | ⍝ |/ (__) ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ a fren came up 3 little cats walking up a hill ∧＿∧ (,,´∀｀）　 ⊂　 つ | ⍝ |/ (__) ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ (,,´∀｀） _⎐_/ &lt;-2-&gt; 〈 〉 a fren came up 4 little cats walking up a hill ∧＿∧ (,,´∀｀）　 ⊂　 つ | ⍝ |/ (__) ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ (,,´∀｀） _⎐_/ &lt;-2-&gt; 〈 〉 ʕ•́ᴥ•̀ʔ _⍾_/ == == _/⍵ _ a fren came up 5 little cats walking up a hill ∧＿∧ (,,´∀｀）　 ⊂　 つ | ⍝ |/ (__) ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ (,,´∀｀） _⎐_/ &lt;-2-&gt; 〈 〉 ʕ•́ᴥ•̀ʔ _⍾_/ == == _/⍵ _ ∧＿∧ (,,´⍝｀）　 ⊂　 つ | |/ (__) Now they are ready to race!! THE END .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/09/16/mokee.html",
            "relUrl": "/jupyter/2022/09/16/mokee.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "If Statements",
            "content": "if statements are conditional statements that execute based off of a condition. The syntax of an if statement in JAVA is . if ( number &gt; 0 ) { //code code code } . An if else statement is going to execute another block of code if the first condition is not met. . if ( number &gt; 0 ) { //code code code } else { //keyword else //more code code code } . Else if will add another condition that it can execute . if ( number &gt; 0 ) { //code code code } else if (number &lt; 0) { //more code code } else { System.out.println(&quot;code&quot;); } . De Morgan&#39;s Law . There are 2, which is basically (AuB)&#39; = A&#39; n B&#39; or the compliment of the union is equal to the intersection of the compliment (neither a or b is equal to not a and not b) . https://cdn.discordapp.com/attachments/967938602485035090/1018304363065778317/unknown.png . and . (AnB)&#39; = A&#39; u B&#39; or the compliment of the intersection is equal to the union of the compliments (not a and b equals not a or not b) . https://cdn.discordapp.com/attachments/967938602485035090/1018305030761234540/unknown.png . image.png . image.png . This is the if statements example, it basically just has an imput, and depending on what the input is, it will do one of 5 situations. . Java If explanation . This block uses a while loop and basically depending on the choice chosen, it would go to that if condition, and if it isn&#39;t one of the ifs, it will exit the while loop. . import org.apache.commons.lang3.StringUtils; import java.util.Scanner; public class test{ public static void main(String[] args) { Integer number = 2; while (number &gt; 0) { System.out.println(&quot;choose a number from 1 to 5, type anything else for exit.&quot;); Scanner input = new Scanner(System.in); number = input.nextInt(); System.out.println(number); if (number == 1) { System.out.println(&quot;(V) ∧ ∧ (V) &quot;); System.out.println(&quot; ヽ(･ω･) ﾉ&quot;); System.out.println(&quot; / /&quot;); System.out.println(&quot; ノ￣ゝ&quot;); } else if (number == 2 ) { System.out.println(&quot; ∧＿∧&quot;); System.out.println(&quot; (,,´∀｀）　&quot;); System.out.println(&quot; ⊂　 つ&quot;); System.out.println(&quot; | |/&quot;); System.out.println(&quot; (__)&quot;); } else if (number == 3) { // basically what this one is is that the print does not like escape characters(basically / so if you wanna print out /n), which it kept giving me the error of illegal escape character String str1 = &quot; ／ﾌﾌ ム｀ヽ &quot;; String str2 = &quot; / /) ∧∧　 ) ヽ) &quot;; String str3 = &quot; / | (´・ω・`）ノ⌒（ゝ ) &quot;; String str4 = &quot; / ﾉ⌒7⌒ヽーく ヽ ., / &quot;; String str5 = &quot; ヽ _ / ｡　 ノ､ ｡|/ &quot;; String str6 = &quot; `ヽ` ー-&#39;_人`ーﾉ &quot;; String str7 = &quot; ヽ ￣ _人&#39;彡ﾉ &quot;; String str8 = &quot; ﾉ r&#39;十ヽ / &quot;; // this method of storing it in varibles gets around that System.out.println(str1); System.out.println(str2); System.out.println(str3); System.out.println(str4); System.out.println(str5); System.out.println(str6); System.out.println(str7); System.out.println(str8); } else if (number == 4) { for (int i = 0; i &lt; 5; i++) //this makes a loop that loops 5 times { String space = &quot; &quot;; //prints the spaces String repeated = StringUtils.repeat(space, i); //this repeats the character i times System.out.println(repeated); System.out.println(repeated + &quot;(V) ∧ ∧(V) &quot;); System.out.println(repeated + &quot; ヽ(･ω･) ﾉ&quot;); System.out.println(repeated + &quot; / /&quot;); System.out.println(repeated + &quot; ノ￣ゝ&quot;); } //idk how to clear console but i would add it right here^ } else if (number == 5 ) { for (int i = 0; i &lt; 5; i++) { System.out.println(&quot; ∧＿∧&quot;); System.out.println(&quot; (,,´∀｀）　&quot;); System.out.println(&quot; ⊂　 つ&quot;); System.out.println(&quot; | |/&quot;); System.out.println(&quot; (__)&quot;); } } else { number=0; System.out.println(number); } } System.out.println(&quot;it ended&quot;); } } test.main(null); . choose a number from 1 to 5, type anything else for exit. 1 (V) ∧ ∧ (V) ヽ(･ω･) ﾉ / / ノ￣ゝ choose a number from 1 to 5, type anything else for exit. 2 ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) choose a number from 1 to 5, type anything else for exit. 3 ／ﾌﾌ ム｀ヽ / /) ∧∧　 ) ヽ) / | (´・ω・`）ノ⌒（ゝ ) / ﾉ⌒7⌒ヽーく ヽ ., / ヽ _ / ｡　 ノ､ ｡|/ `ヽ` ー-&#39;_人`ーﾉ ヽ ￣ _人&#39;彡ﾉ ﾉ r&#39;十ヽ / choose a number from 1 to 5, type anything else for exit. 4 (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ choose a number from 1 to 5, type anything else for exit. 5 ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) choose a number from 1 to 5, type anything else for exit. 6 0 it ended . Switch Case . This one uses switch and case, and also a while loop The while loop keeps going as long as bool is true, and the ending condition is going to make bool false. Switch reads the variable choice, which is then always made from the input from the while loop. The case is going to be what the choice is. . import org.apache.commons.lang3.StringUtils; import java.util.Scanner; public class test{ public static void main(String[] args) { System.out.println(&quot;choose a number from 1 to 5, type anything else for exit.&quot;); Scanner input = new Scanner(System.in); boolean bool = true; int choice; while(bool) { System.out.println(&quot;1. lobster cat&quot;); System.out.println(&quot;2. idk what this is&quot;); System.out.println(&quot;3. jacked cat&quot;); System.out.println(&quot;4. cat animation&quot;); System.out.println(&quot;5. 5 cats&quot;); choice = input.nextInt(); switch(choice) { case 1: System.out.println(&quot;1. lobster cat&quot;); System.out.println(&quot;(V) ∧ ∧ (V) &quot;); System.out.println(&quot; ヽ(･ω･) ﾉ&quot;); System.out.println(&quot; / /&quot;); System.out.println(&quot; ノ￣ゝ&quot;); break; case 2: System.out.println(&quot;2. idk what this is&quot;); System.out.println(&quot; ∧＿∧&quot;); System.out.println(&quot; (,,´∀｀）　&quot;); System.out.println(&quot; ⊂　 つ&quot;); System.out.println(&quot; | |/&quot;); System.out.println(&quot; (__)&quot;); break; case 3: System.out.println(&quot;3. jacked cat&quot;); String str1 = &quot; ／ﾌﾌ ム｀ヽ &quot;; String str2 = &quot; / /) ∧∧　 ) ヽ) &quot;; String str3 = &quot; / | (´・ω・`）ノ⌒（ゝ ) &quot;; String str4 = &quot; / ﾉ⌒7⌒ヽーく ヽ ., / &quot;; String str5 = &quot; ヽ _ / ｡　 ノ､ ｡|/ &quot;; String str6 = &quot; `ヽ` ー-&#39;_人`ーﾉ &quot;; String str7 = &quot; ヽ ￣ _人&#39;彡ﾉ &quot;; String str8 = &quot; ﾉ r&#39;十ヽ / &quot;; System.out.println(str1); System.out.println(str2); System.out.println(str3); System.out.println(str4); System.out.println(str5); System.out.println(str6); System.out.println(str7); System.out.println(str8); break; case 4: System.out.println(&quot;4. cat animation&quot;); for (int i = 0; i &lt; 5; i++) //this makes a loop that loops 5 times { String space = &quot; &quot;; //prints the spaces String repeated = StringUtils.repeat(space, i); //this repeats the character i times System.out.println(repeated); System.out.println(repeated + &quot;(V) ∧ ∧(V) &quot;); System.out.println(repeated + &quot; ヽ(･ω･) ﾉ&quot;); System.out.println(repeated + &quot; / /&quot;); System.out.println(repeated + &quot; ノ￣ゝ&quot;); } //idk how to clear console but i would add it right here^ break; case 5: System.out.println(&quot;5. 5 cats&quot;); for (int i = 0; i &lt; 5; i++) { System.out.println(&quot; ∧＿∧&quot;); System.out.println(&quot; (,,´∀｀）　&quot;); System.out.println(&quot; ⊂　 つ&quot;); System.out.println(&quot; | |/&quot;); System.out.println(&quot; (__)&quot;); } break; case 6: System.out.println(&quot;exit&quot;); System.exit(0); bool = !bool; break; default: System.out.println(&quot;not valid&quot;); break; } } } } test.main(null); . choose a number from 1 to 5, type anything else for exit. 1. lobster cat 2. idk what this is 3. jacked cat 4. cat animation 5. 5 cats 1. lobster cat (V) ∧ ∧ (V) ヽ(･ω･) ﾉ / / ノ￣ゝ 1. lobster cat 2. idk what this is 3. jacked cat 4. cat animation 5. 5 cats 2. idk what this is ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) 1. lobster cat 2. idk what this is 3. jacked cat 4. cat animation 5. 5 cats 3. jacked cat ／ﾌﾌ ム｀ヽ / /) ∧∧　 ) ヽ) / | (´・ω・`）ノ⌒（ゝ ) / ﾉ⌒7⌒ヽーく ヽ ., / ヽ _ / ｡　 ノ､ ｡|/ `ヽ` ー-&#39;_人`ーﾉ ヽ ￣ _人&#39;彡ﾉ ﾉ r&#39;十ヽ / 1. lobster cat 2. idk what this is 3. jacked cat 4. cat animation 5. 5 cats 4. cat animation (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ (V) ∧ ∧(V) ヽ(･ω･) ﾉ / / ノ￣ゝ 1. lobster cat 2. idk what this is 3. jacked cat 4. cat animation 5. 5 cats 5. 5 cats ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) ∧＿∧ (,,´∀｀）　 ⊂　 つ | |/ (__) 1. lobster cat 2. idk what this is 3. jacked cat 4. cat animation 5. 5 cats exit . Canceled future for execute_request message before replies were done . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . //De Morgans Law . public class demorgan { public static void main(String[] args) { System.out.println(&quot;yes&quot;); boolean a = true; boolean b = false; if (!((a &amp;&amp; b) &amp;&amp; (!a || !b))) //this makes sure that it prints it if it is true, and it is true if they are equal { System.out.println(&quot;second law&quot;); } if (!((b || a) &amp;&amp; (!b &amp;&amp; !a))) //this ^ { System.out.println(&quot;first law&quot;); } } } demorgan.main(null); . yes second law first law true .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/09/09/if.html",
            "relUrl": "/jupyter/2022/09/09/if.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Focus and Habits",
            "content": "Note of Gratitude . I am grateful for being able to learn CS. I am grateful for having a computer, a great teacher, an enjoyable group, and the time to learn CS outside of school. . Goals . I think that one of my goals for this year is that I would like to be able to create something from scratch, without having to search up syntax or whatnot. . Goals with Happy People . I think that my group is very fun to be in. We always have a goal of having all members understand everything we learned in the week. .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/09/09/focusandhabits.html",
            "relUrl": "/jupyter/2022/09/09/focusandhabits.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Objects in Java",
            "content": "Mort&#39;s console menu. I just looked over it and added some comments on what I understood. . import java.util.Scanner; // scanner thing for inputs import java.lang.Math; // random numbers public class Menu { public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors, keyword array {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; 033[0;93m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Hello World&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;exit&quot;); quit = true; break; case 1: System.out.print(&quot;helloworld&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); //prints the name with the colors break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic * try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;-&quot;); } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 0 - Quit - 2: DefaultRedGreenYellowBluePurpleCyanWhite 2: DefaultRedGreenYellowBluePurpleCyanWhite 3: Loading...#################### 0: exit . Unit 2: . Using main, syntax of the header. Meaning of the words: JVM - java virtual management, loads and executes the code code code Public - method needs to be public for JVM to identify it Static - only one type of method, not shared. Void - nothing returned from main method Main - identified by JVM to execute any program . public class ClassName { public static void main(String [] args) { } } . Unit 3: . This one talks a bit more about setting up the scenario of a neighborhood painter. It also talks about using objects. . ClassName objectName = new ClassName(); . Unit 4: . Describes a method, which is a “class’s behaviors” . Procedural abstraction - allows programmer to use method by knowing what method does Void method - method that performs action, but doesn’t return value Argument - value passed to method or constructor when method is called Dot operator - used to call method in class Method - named set of instructions to perform a task Parameter - variable in method signature that defines type of value to receive when method is called . Unit 5: . Use if statements. . Boolean - primitive that is either true or false If statement - conditional statement that executes when condition is true Condition - determines when to execute code code code Conditional statement - statement that executes when condition is met Logic error - error that occurs when code(x3) runs, but doesn’t do what is expected Return - exit method and go back to a point in program that called it . Unit 6: . Learn about inheritance. . Super keyword - keyword used to refer to superclass constructor signature - first line of constructor which includes public keyword, constructor name, and values to specify when object is created Inheritance - an OOP principle where subclass inherits attributes and behaviors of superclass Subclass - class that extends a superclass and inherits its attributes and behaviors Superclass - class that can create subclasses . Unit 7: . How to create a new method. . Method signature - name and parameter list . Unit 8: . Code review, feedback, and documentation . Code review - process of examining code and giving feedback to improve code code code Comment - text note Documentation - written description of purpose of code code code Programming style - set of guidelines for formatting code code code . Unit 9: . Repeat code. While loops. . While loop - keeps executing code as long as condition is true Algorithm - instructions to solve a task Control structure - conditional statement that affects program Efficient - get the most with least amount of waste Infinite loop - loop where boolean is always true Iteration statement(loop) - control structure that repeatedly executes code Pseudocode - description of steps in algorithm that is not code code code . Unit 10: . If statement, now we learn about the NOT. . NOT operator - returns true when operend is false, and vice versa If else statement - executes one thing for if, executes something else for else. Logical operator - operator that returns boolean . Unit 11: . How to use console debugging . Concatenation - join 2 strings together . Unit 12: . Decomposition and top down design, deconstruct problems into smaller tasks. . Method decomposition - breaking down a problem into smaller parts to write methods for each part. . Edge case - bug that occurs at highest or lowest end of range, or in extremes Redundant code - unnecessary code code code . Unit 13: . Create additional subclasses with special behaviors . Inheritance hierarchy - class serves as superclass for more than one subclass . Unit 14: . How can I apply my OOP to expand my code code code. . Unit 15: . I examine code. I also want code feedback. . Open source code - code that is for free use .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/09/04/code-oop.html",
            "relUrl": "/jupyter/2022/09/04/code-oop.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "College Board",
            "content": "The College Board stuff . Unit 1: Primitives .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/08/27/CB.html",
            "relUrl": "/jupyter/2022/08/27/CB.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Primatives in Java",
            "content": "import java.util.Scanner; public class BooleanExample2 { public static void main(String[] args) { boolean b1=true; boolean b2=false; System.out.println(&quot;b1 = &quot; + b1); System.out.println(&quot;b2 = &quot; + b2); Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;do you think that b1 equals b2?&quot;); String input = myObj.nextLine(); // Read user input System.out.println(&quot;answer &quot; + input); // Output user input String compile = input.toLowerCase(); // System.out.println(compile); boolean result = compile.matches(&quot;(.*)y(.*)&quot;); // System.out.println(result); //System.out.println(result); if (result == b2) System.out.println(&quot;you right&quot;); else System.out.println(&quot;you wrong&quot;); } } BooleanExample2.main(null); . b1 = true b2 = false do you think that b1 equals b2? answer no you right . //stupid regex thing that i need to test public class Test { public static void main(String[] args) { String yes = &quot;eYes&quot;; String compile = yes.toLowerCase(); System.out.println(yes); System.out.println(compile.matches(&quot;(.*)y(.*)&quot;)); System.out.println(yes.matches(&quot;/^y&quot;)); } } Test.main(null); . eYes true false .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/08/26/javaprimitives.html",
            "relUrl": "/jupyter/2022/08/26/javaprimitives.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Bash ting",
            "content": "realpath . bash ~/vscode/bash.sh python --version conda --version which code # vscode . /home/k/vscode/KurtisFP/_notebooks _______________________________________ &lt; Are you sure the back door is locked? &gt; ^__^ (oo) _______ (__) ) / ||-w | || || #!/bin/bash fortune | cowsay cat ~/vscode/bash.sh #start of script jupyter kernelspec list Available kernels: bash /home/k/.local/share/jupyter/kernels/bash java /home/k/.local/share/jupyter/kernels/java javascript /home/k/.local/share/jupyter/kernels/javascript python3 /home/k/anaconda3/share/jupyter/kernels/python3 Python 3.9.1204l conda 4.14.0004l /home/k/.vscode-server/bin/e4503b30fc78200f846c62cf8091b76ff5547662/bin/remote-cli/code . .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2022/08/25/bashnotebookr.html",
            "relUrl": "/jupyter/2022/08/25/bashnotebookr.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Title",
            "content": "Hello World Python Jupyter . Testing the python kernel . title:Hello World Python Jupyter Kernel- toc: true | comments: true | categories: | . print(&quot;hello world&quot;) . hello world .",
            "url": "https://paulman420.github.io/KurtisFP/2022/08/21/kurtis-python.html",
            "relUrl": "/2022/08/21/kurtis-python.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Title",
            "content": "Hello Java Jupyter . Testing the java kernel . title:Hello World Java Jupyter Kernel- toc: true | comments: true | categories: | . System.out.println(&quot;Hello WOrld&quot;) . Hello WOrld .",
            "url": "https://paulman420.github.io/KurtisFP/2022/08/21/kurtis-java.html",
            "relUrl": "/2022/08/21/kurtis-java.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Title",
            "content": "first post . first post . title:First Post- toc: true | comments: true | categories: | . Kurtis first entry . hi .",
            "url": "https://paulman420.github.io/KurtisFP/2022/08/21/firstpost.html",
            "relUrl": "/2022/08/21/firstpost.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://paulman420.github.io/KurtisFP/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post33": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://paulman420.github.io/KurtisFP/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://paulman420.github.io/KurtisFP/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "College Board",
          "content": "College Board Units . Unit 1: Primitive Types . notebook .",
          "url": "https://paulman420.github.io/KurtisFP/cb/",
          "relUrl": "/cb/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://paulman420.github.io/KurtisFP/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}